// Code generated by entproto. DO NOT EDIT.
syntax = "proto3";

package entpb;

import "google/protobuf/empty.proto";

import "google/protobuf/wrappers.proto";

option go_package = "ticketing/ent/proto/entpb";

message Concert {
  bytes id = 1;

  string title = 2;

  string artist = 3;

  string imageUrl = 4;

  repeated ConcertSession hasConcertSessions = 5;
}

message CreateConcertRequest {
  Concert concert = 1;
}

message GetConcertRequest {
  bytes id = 1;

  View view = 2;

  enum View {
    VIEW_UNSPECIFIED = 0;

    BASIC = 1;

    WITH_EDGE_IDS = 2;
  }
}

message UpdateConcertRequest {
  Concert concert = 1;
}

message DeleteConcertRequest {
  bytes id = 1;
}

message ListConcertRequest {
  int32 page_size = 1;

  string page_token = 2;

  View view = 3;

  enum View {
    VIEW_UNSPECIFIED = 0;

    BASIC = 1;

    WITH_EDGE_IDS = 2;
  }
}

message ListConcertResponse {
  repeated Concert concert_list = 1;

  string next_page_token = 2;
}

message BatchCreateConcertsRequest {
  repeated CreateConcertRequest requests = 1;
}

message BatchCreateConcertsResponse {
  repeated Concert concerts = 1;
}

message ConcertSession {
  bytes id = 1;

  int64 sessionDateTime = 2;

  repeated Concert ofConcert = 3;

  repeated Section hasSections = 4;
}

message CreateConcertSessionRequest {
  ConcertSession concert_session = 1;
}

message GetConcertSessionRequest {
  bytes id = 1;

  View view = 2;

  enum View {
    VIEW_UNSPECIFIED = 0;

    BASIC = 1;

    WITH_EDGE_IDS = 2;
  }
}

message UpdateConcertSessionRequest {
  ConcertSession concert_session = 1;
}

message DeleteConcertSessionRequest {
  bytes id = 1;
}

message ListConcertSessionRequest {
  int32 page_size = 1;

  string page_token = 2;

  View view = 3;

  enum View {
    VIEW_UNSPECIFIED = 0;

    BASIC = 1;

    WITH_EDGE_IDS = 2;
  }
}

message ListConcertSessionResponse {
  repeated ConcertSession concert_session_list = 1;

  string next_page_token = 2;
}

message BatchCreateConcertSessionsRequest {
  repeated CreateConcertSessionRequest requests = 1;
}

message BatchCreateConcertSessionsResponse {
  repeated ConcertSession concert_sessions = 1;
}

message Section {
  bytes id = 1;

  string name = 2;

  int64 capacity = 3;

  int64 reserved = 4;

  int64 bought = 5;

  Category category = 6;

  int64 price = 7;

  repeated Ticket hasTickets = 8;

  ConcertSession atConcertSession = 9;

  enum Category {
    CATEGORY_UNSPECIFIED = 0;

    CATEGORY_CAT1 = 1;

    CATEGORY_CAT2 = 2;

    CATEGORY_CAT3 = 3;

    CATEGORY_CAT4 = 4;

    CATEGORY_CAT5 = 5;
  }
}

message CreateSectionRequest {
  Section section = 1;
}

message GetSectionRequest {
  bytes id = 1;

  View view = 2;

  enum View {
    VIEW_UNSPECIFIED = 0;

    BASIC = 1;

    WITH_EDGE_IDS = 2;
  }
}

message UpdateSectionRequest {
  Section section = 1;
}

message DeleteSectionRequest {
  bytes id = 1;
}

message ListSectionRequest {
  int32 page_size = 1;

  string page_token = 2;

  View view = 3;

  enum View {
    VIEW_UNSPECIFIED = 0;

    BASIC = 1;

    WITH_EDGE_IDS = 2;
  }
}

message ListSectionResponse {
  repeated Section section_list = 1;

  string next_page_token = 2;
}

message BatchCreateSectionsRequest {
  repeated CreateSectionRequest requests = 1;
}

message BatchCreateSectionsResponse {
  repeated Section sections = 1;
}

message Ticket {
  bytes id = 1;

  int64 seatNumber = 2;

  Status status = 3;

  google.protobuf.BytesValue userId = 4;

  Section withinSection = 5;

  enum Status {
    STATUS_UNSPECIFIED = 0;

    STATUS_AVAILABLE = 1;

    STATUS_BOUGHT = 2;

    STATUS_RESERVED = 3;
  }
}

message CreateTicketRequest {
  Ticket ticket = 1;
}

message GetTicketRequest {
  bytes id = 1;

  View view = 2;

  enum View {
    VIEW_UNSPECIFIED = 0;

    BASIC = 1;

    WITH_EDGE_IDS = 2;
  }
}

message UpdateTicketRequest {
  Ticket ticket = 1;
}

message DeleteTicketRequest {
  bytes id = 1;
}

message ListTicketRequest {
  int32 page_size = 1;

  string page_token = 2;

  View view = 3;

  enum View {
    VIEW_UNSPECIFIED = 0;

    BASIC = 1;

    WITH_EDGE_IDS = 2;
  }
}

message ListTicketResponse {
  repeated Ticket ticket_list = 1;

  string next_page_token = 2;
}

message BatchCreateTicketsRequest {
  repeated CreateTicketRequest requests = 1;
}

message BatchCreateTicketsResponse {
  repeated Ticket tickets = 1;
}

service ConcertService {
  rpc Create ( CreateConcertRequest ) returns ( Concert );

  rpc Get ( GetConcertRequest ) returns ( Concert );

  rpc Update ( UpdateConcertRequest ) returns ( Concert );

  rpc Delete ( DeleteConcertRequest ) returns ( google.protobuf.Empty );

  rpc List ( ListConcertRequest ) returns ( ListConcertResponse );

  rpc BatchCreate ( BatchCreateConcertsRequest ) returns ( BatchCreateConcertsResponse );
}

service ConcertSessionService {
  rpc Create ( CreateConcertSessionRequest ) returns ( ConcertSession );

  rpc Get ( GetConcertSessionRequest ) returns ( ConcertSession );

  rpc Update ( UpdateConcertSessionRequest ) returns ( ConcertSession );

  rpc Delete ( DeleteConcertSessionRequest ) returns ( google.protobuf.Empty );

  rpc List ( ListConcertSessionRequest ) returns ( ListConcertSessionResponse );

  rpc BatchCreate ( BatchCreateConcertSessionsRequest ) returns ( BatchCreateConcertSessionsResponse );
}

service SectionService {
  rpc Create ( CreateSectionRequest ) returns ( Section );

  rpc Get ( GetSectionRequest ) returns ( Section );

  rpc Update ( UpdateSectionRequest ) returns ( Section );

  rpc Delete ( DeleteSectionRequest ) returns ( google.protobuf.Empty );

  rpc List ( ListSectionRequest ) returns ( ListSectionResponse );

  rpc BatchCreate ( BatchCreateSectionsRequest ) returns ( BatchCreateSectionsResponse );
}

service TicketService {
  rpc Create ( CreateTicketRequest ) returns ( Ticket );

  rpc Get ( GetTicketRequest ) returns ( Ticket );

  rpc Update ( UpdateTicketRequest ) returns ( Ticket );

  rpc Delete ( DeleteTicketRequest ) returns ( google.protobuf.Empty );

  rpc List ( ListTicketRequest ) returns ( ListTicketResponse );

  rpc BatchCreate ( BatchCreateTicketsRequest ) returns ( BatchCreateTicketsResponse );
}
