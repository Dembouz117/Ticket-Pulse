// Code generated by MockGen. DO NOT EDIT.
// Source: internal/common/repository/concert_repository.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository/mock_concertrepository.go -source=internal/common/repository/concert_repository.go ConcertRepository
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	ent "ticketing/ent"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockConcertRepository is a mock of ConcertRepository interface.
type MockConcertRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConcertRepositoryMockRecorder
}

// MockConcertRepositoryMockRecorder is the mock recorder for MockConcertRepository.
type MockConcertRepositoryMockRecorder struct {
	mock *MockConcertRepository
}

// NewMockConcertRepository creates a new mock instance.
func NewMockConcertRepository(ctrl *gomock.Controller) *MockConcertRepository {
	mock := &MockConcertRepository{ctrl: ctrl}
	mock.recorder = &MockConcertRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConcertRepository) EXPECT() *MockConcertRepositoryMockRecorder {
	return m.recorder
}

// CreateConcert mocks base method.
func (m *MockConcertRepository) CreateConcert(ctx context.Context, title, artist, imageUrl, description, headline string, featured bool) (*ent.Concert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConcert", ctx, title, artist, imageUrl, description, headline, featured)
	ret0, _ := ret[0].(*ent.Concert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConcert indicates an expected call of CreateConcert.
func (mr *MockConcertRepositoryMockRecorder) CreateConcert(ctx, title, artist, imageUrl, description, headline, featured any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConcert", reflect.TypeOf((*MockConcertRepository)(nil).CreateConcert), ctx, title, artist, imageUrl, description, headline, featured)
}

// DeleteAllConcerts mocks base method.
func (m *MockConcertRepository) DeleteAllConcerts(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllConcerts", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllConcerts indicates an expected call of DeleteAllConcerts.
func (mr *MockConcertRepositoryMockRecorder) DeleteAllConcerts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllConcerts", reflect.TypeOf((*MockConcertRepository)(nil).DeleteAllConcerts), ctx)
}

// DeleteConcert mocks base method.
func (m *MockConcertRepository) DeleteConcert(ctx context.Context, concertID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConcert", ctx, concertID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConcert indicates an expected call of DeleteConcert.
func (mr *MockConcertRepositoryMockRecorder) DeleteConcert(ctx, concertID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConcert", reflect.TypeOf((*MockConcertRepository)(nil).DeleteConcert), ctx, concertID)
}

// GetAllConcerts mocks base method.
func (m *MockConcertRepository) GetAllConcerts(ctx context.Context) ([]*ent.Concert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllConcerts", ctx)
	ret0, _ := ret[0].([]*ent.Concert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllConcerts indicates an expected call of GetAllConcerts.
func (mr *MockConcertRepositoryMockRecorder) GetAllConcerts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllConcerts", reflect.TypeOf((*MockConcertRepository)(nil).GetAllConcerts), ctx)
}

// GetConcertByID mocks base method.
func (m *MockConcertRepository) GetConcertByID(ctx context.Context, concertID uuid.UUID) (*ent.Concert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConcertByID", ctx, concertID)
	ret0, _ := ret[0].(*ent.Concert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConcertByID indicates an expected call of GetConcertByID.
func (mr *MockConcertRepositoryMockRecorder) GetConcertByID(ctx, concertID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConcertByID", reflect.TypeOf((*MockConcertRepository)(nil).GetConcertByID), ctx, concertID)
}

// GetConcertsByArtist mocks base method.
func (m *MockConcertRepository) GetConcertsByArtist(ctx context.Context, artistName string) ([]*ent.Concert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConcertsByArtist", ctx, artistName)
	ret0, _ := ret[0].([]*ent.Concert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConcertsByArtist indicates an expected call of GetConcertsByArtist.
func (mr *MockConcertRepositoryMockRecorder) GetConcertsByArtist(ctx, artistName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConcertsByArtist", reflect.TypeOf((*MockConcertRepository)(nil).GetConcertsByArtist), ctx, artistName)
}

// GetFeaturedConcerts mocks base method.
func (m *MockConcertRepository) GetFeaturedConcerts(ctx context.Context) ([]*ent.Concert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeaturedConcerts", ctx)
	ret0, _ := ret[0].([]*ent.Concert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeaturedConcerts indicates an expected call of GetFeaturedConcerts.
func (mr *MockConcertRepositoryMockRecorder) GetFeaturedConcerts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeaturedConcerts", reflect.TypeOf((*MockConcertRepository)(nil).GetFeaturedConcerts), ctx)
}

// GetSessionsOfConcert mocks base method.
func (m *MockConcertRepository) GetSessionsOfConcert(ctx context.Context, concertID uuid.UUID) ([]*ent.ConcertSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionsOfConcert", ctx, concertID)
	ret0, _ := ret[0].([]*ent.ConcertSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionsOfConcert indicates an expected call of GetSessionsOfConcert.
func (mr *MockConcertRepositoryMockRecorder) GetSessionsOfConcert(ctx, concertID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsOfConcert", reflect.TypeOf((*MockConcertRepository)(nil).GetSessionsOfConcert), ctx, concertID)
}

// UpdateConcert mocks base method.
func (m *MockConcertRepository) UpdateConcert(ctx context.Context, id uuid.UUID, title, artist, imageUrl, description, headline string, featured bool) (*ent.Concert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConcert", ctx, id, title, artist, imageUrl, description, headline, featured)
	ret0, _ := ret[0].(*ent.Concert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConcert indicates an expected call of UpdateConcert.
func (mr *MockConcertRepositoryMockRecorder) UpdateConcert(ctx, id, title, artist, imageUrl, description, headline, featured any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConcert", reflect.TypeOf((*MockConcertRepository)(nil).UpdateConcert), ctx, id, title, artist, imageUrl, description, headline, featured)
}
