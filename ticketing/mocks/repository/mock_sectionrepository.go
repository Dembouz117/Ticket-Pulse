// Code generated by MockGen. DO NOT EDIT.
// Source: internal/common/repository/section_repository.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository/mock_sectionrepository.go -source=internal/common/repository/section_repository.go SectionRepository
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	ent "ticketing/ent"
	section "ticketing/ent/section"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSectionRepository is a mock of SectionRepository interface.
type MockSectionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSectionRepositoryMockRecorder
}

// MockSectionRepositoryMockRecorder is the mock recorder for MockSectionRepository.
type MockSectionRepositoryMockRecorder struct {
	mock *MockSectionRepository
}

// NewMockSectionRepository creates a new mock instance.
func NewMockSectionRepository(ctrl *gomock.Controller) *MockSectionRepository {
	mock := &MockSectionRepository{ctrl: ctrl}
	mock.recorder = &MockSectionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSectionRepository) EXPECT() *MockSectionRepositoryMockRecorder {
	return m.recorder
}

// CreateSection mocks base method.
func (m *MockSectionRepository) CreateSection(ctx context.Context, sessionID uuid.UUID, name string, capacity, bought, reserved int, category section.Category, price int) (*ent.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSection", ctx, sessionID, name, capacity, bought, reserved, category, price)
	ret0, _ := ret[0].(*ent.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSection indicates an expected call of CreateSection.
func (mr *MockSectionRepositoryMockRecorder) CreateSection(ctx, sessionID, name, capacity, bought, reserved, category, price any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSection", reflect.TypeOf((*MockSectionRepository)(nil).CreateSection), ctx, sessionID, name, capacity, bought, reserved, category, price)
}

// DeleteAllSections mocks base method.
func (m *MockSectionRepository) DeleteAllSections(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSections", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllSections indicates an expected call of DeleteAllSections.
func (mr *MockSectionRepositoryMockRecorder) DeleteAllSections(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSections", reflect.TypeOf((*MockSectionRepository)(nil).DeleteAllSections), ctx)
}

// DeleteSection mocks base method.
func (m *MockSectionRepository) DeleteSection(ctx context.Context, sectionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSection", ctx, sectionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSection indicates an expected call of DeleteSection.
func (mr *MockSectionRepositoryMockRecorder) DeleteSection(ctx, sectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSection", reflect.TypeOf((*MockSectionRepository)(nil).DeleteSection), ctx, sectionID)
}

// GetAllSections mocks base method.
func (m *MockSectionRepository) GetAllSections(ctx context.Context) ([]*ent.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSections", ctx)
	ret0, _ := ret[0].([]*ent.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSections indicates an expected call of GetAllSections.
func (mr *MockSectionRepositoryMockRecorder) GetAllSections(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSections", reflect.TypeOf((*MockSectionRepository)(nil).GetAllSections), ctx)
}

// GetAvailableTicketsBySectionID mocks base method.
func (m *MockSectionRepository) GetAvailableTicketsBySectionID(ctx context.Context, sectionID uuid.UUID) ([]*ent.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableTicketsBySectionID", ctx, sectionID)
	ret0, _ := ret[0].([]*ent.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableTicketsBySectionID indicates an expected call of GetAvailableTicketsBySectionID.
func (mr *MockSectionRepositoryMockRecorder) GetAvailableTicketsBySectionID(ctx, sectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableTicketsBySectionID", reflect.TypeOf((*MockSectionRepository)(nil).GetAvailableTicketsBySectionID), ctx, sectionID)
}

// GetSectionByID mocks base method.
func (m *MockSectionRepository) GetSectionByID(ctx context.Context, sectionID uuid.UUID) (*ent.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSectionByID", ctx, sectionID)
	ret0, _ := ret[0].(*ent.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSectionByID indicates an expected call of GetSectionByID.
func (mr *MockSectionRepositoryMockRecorder) GetSectionByID(ctx, sectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSectionByID", reflect.TypeOf((*MockSectionRepository)(nil).GetSectionByID), ctx, sectionID)
}

// GetTicketsBySection mocks base method.
func (m *MockSectionRepository) GetTicketsBySection(ctx context.Context, sectionID uuid.UUID) ([]*ent.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketsBySection", ctx, sectionID)
	ret0, _ := ret[0].([]*ent.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketsBySection indicates an expected call of GetTicketsBySection.
func (mr *MockSectionRepositoryMockRecorder) GetTicketsBySection(ctx, sectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketsBySection", reflect.TypeOf((*MockSectionRepository)(nil).GetTicketsBySection), ctx, sectionID)
}

// ReleaseExpiredTicketsBySectionID mocks base method.
func (m *MockSectionRepository) ReleaseExpiredTicketsBySectionID(ctx context.Context, sectionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseExpiredTicketsBySectionID", ctx, sectionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseExpiredTicketsBySectionID indicates an expected call of ReleaseExpiredTicketsBySectionID.
func (mr *MockSectionRepositoryMockRecorder) ReleaseExpiredTicketsBySectionID(ctx, sectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseExpiredTicketsBySectionID", reflect.TypeOf((*MockSectionRepository)(nil).ReleaseExpiredTicketsBySectionID), ctx, sectionID)
}

// UpdateSection mocks base method.
func (m *MockSectionRepository) UpdateSection(ctx context.Context, sectionID uuid.UUID, name string, capacity, reserved, bought int, category section.Category, price int) (*ent.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSection", ctx, sectionID, name, capacity, reserved, bought, category, price)
	ret0, _ := ret[0].(*ent.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSection indicates an expected call of UpdateSection.
func (mr *MockSectionRepositoryMockRecorder) UpdateSection(ctx, sectionID, name, capacity, reserved, bought, category, price any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSection", reflect.TypeOf((*MockSectionRepository)(nil).UpdateSection), ctx, sectionID, name, capacity, reserved, bought, category, price)
}
