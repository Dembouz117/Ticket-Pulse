// Code generated by MockGen. DO NOT EDIT.
// Source: internal/common/repository/session_repository.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository/mock_sessionrepository.go -source=internal/common/repository/session_repository.go SessionRepository
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	ent "ticketing/ent"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// CreateConcertSession mocks base method.
func (m *MockSessionRepository) CreateConcertSession(ctx context.Context, concertID uuid.UUID, datetime int) (*ent.ConcertSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConcertSession", ctx, concertID, datetime)
	ret0, _ := ret[0].(*ent.ConcertSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConcertSession indicates an expected call of CreateConcertSession.
func (mr *MockSessionRepositoryMockRecorder) CreateConcertSession(ctx, concertID, datetime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConcertSession", reflect.TypeOf((*MockSessionRepository)(nil).CreateConcertSession), ctx, concertID, datetime)
}

// DeleteAllSessions mocks base method.
func (m *MockSessionRepository) DeleteAllSessions(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSessions", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllSessions indicates an expected call of DeleteAllSessions.
func (mr *MockSessionRepositoryMockRecorder) DeleteAllSessions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSessions", reflect.TypeOf((*MockSessionRepository)(nil).DeleteAllSessions), ctx)
}

// DeleteConcertSession mocks base method.
func (m *MockSessionRepository) DeleteConcertSession(ctx context.Context, sessionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConcertSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConcertSession indicates an expected call of DeleteConcertSession.
func (mr *MockSessionRepositoryMockRecorder) DeleteConcertSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConcertSession", reflect.TypeOf((*MockSessionRepository)(nil).DeleteConcertSession), ctx, sessionID)
}

// GetAllSessions mocks base method.
func (m *MockSessionRepository) GetAllSessions(ctx context.Context) ([]*ent.ConcertSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSessions", ctx)
	ret0, _ := ret[0].([]*ent.ConcertSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSessions indicates an expected call of GetAllSessions.
func (mr *MockSessionRepositoryMockRecorder) GetAllSessions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSessions", reflect.TypeOf((*MockSessionRepository)(nil).GetAllSessions), ctx)
}

// GetSectionsOfAConcertSession mocks base method.
func (m *MockSessionRepository) GetSectionsOfAConcertSession(ctx context.Context, sessionID uuid.UUID) ([]*ent.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSectionsOfAConcertSession", ctx, sessionID)
	ret0, _ := ret[0].([]*ent.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSectionsOfAConcertSession indicates an expected call of GetSectionsOfAConcertSession.
func (mr *MockSessionRepositoryMockRecorder) GetSectionsOfAConcertSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSectionsOfAConcertSession", reflect.TypeOf((*MockSessionRepository)(nil).GetSectionsOfAConcertSession), ctx, sessionID)
}

// GetSessionByID mocks base method.
func (m *MockSessionRepository) GetSessionByID(ctx context.Context, sessionID uuid.UUID) (*ent.ConcertSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", ctx, sessionID)
	ret0, _ := ret[0].(*ent.ConcertSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockSessionRepositoryMockRecorder) GetSessionByID(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockSessionRepository)(nil).GetSessionByID), ctx, sessionID)
}

// UpdateConcertSession mocks base method.
func (m *MockSessionRepository) UpdateConcertSession(ctx context.Context, sessionID uuid.UUID, sessionDateTime int) (*ent.ConcertSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConcertSession", ctx, sessionID, sessionDateTime)
	ret0, _ := ret[0].(*ent.ConcertSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConcertSession indicates an expected call of UpdateConcertSession.
func (mr *MockSessionRepositoryMockRecorder) UpdateConcertSession(ctx, sessionID, sessionDateTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConcertSession", reflect.TypeOf((*MockSessionRepository)(nil).UpdateConcertSession), ctx, sessionID, sessionDateTime)
}
