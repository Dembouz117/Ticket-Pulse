// Code generated by MockGen. DO NOT EDIT.
// Source: internal/common/repository/ticket_repository.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository/mock_ticketrepository.go -source=internal/common/repository/ticket_repository.go TicketRepository
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	ent "ticketing/ent"
	ticket "ticketing/ent/ticket"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTicketRepository is a mock of TicketRepository interface.
type MockTicketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTicketRepositoryMockRecorder
}

// MockTicketRepositoryMockRecorder is the mock recorder for MockTicketRepository.
type MockTicketRepositoryMockRecorder struct {
	mock *MockTicketRepository
}

// NewMockTicketRepository creates a new mock instance.
func NewMockTicketRepository(ctrl *gomock.Controller) *MockTicketRepository {
	mock := &MockTicketRepository{ctrl: ctrl}
	mock.recorder = &MockTicketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketRepository) EXPECT() *MockTicketRepositoryMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockTicketRepository) CreateTicket(ctx context.Context, sectionID uuid.UUID, seatNumber int, status ticket.Status) (*ent.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, sectionID, seatNumber, status)
	ret0, _ := ret[0].(*ent.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockTicketRepositoryMockRecorder) CreateTicket(ctx, sectionID, seatNumber, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockTicketRepository)(nil).CreateTicket), ctx, sectionID, seatNumber, status)
}

// DeleteAllTickets mocks base method.
func (m *MockTicketRepository) DeleteAllTickets(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTickets", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllTickets indicates an expected call of DeleteAllTickets.
func (mr *MockTicketRepositoryMockRecorder) DeleteAllTickets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTickets", reflect.TypeOf((*MockTicketRepository)(nil).DeleteAllTickets), ctx)
}

// DeleteTicket mocks base method.
func (m *MockTicketRepository) DeleteTicket(ctx context.Context, ticketID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", ctx, ticketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockTicketRepositoryMockRecorder) DeleteTicket(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockTicketRepository)(nil).DeleteTicket), ctx, ticketID)
}

// GetAllTickets mocks base method.
func (m *MockTicketRepository) GetAllTickets(ctx context.Context) ([]*ent.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTickets", ctx)
	ret0, _ := ret[0].([]*ent.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTickets indicates an expected call of GetAllTickets.
func (mr *MockTicketRepositoryMockRecorder) GetAllTickets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTickets", reflect.TypeOf((*MockTicketRepository)(nil).GetAllTickets), ctx)
}

// GetTicketById mocks base method.
func (m *MockTicketRepository) GetTicketById(ctx context.Context, ticketID uuid.UUID) (*ent.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketById", ctx, ticketID)
	ret0, _ := ret[0].(*ent.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketById indicates an expected call of GetTicketById.
func (mr *MockTicketRepositoryMockRecorder) GetTicketById(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketById", reflect.TypeOf((*MockTicketRepository)(nil).GetTicketById), ctx, ticketID)
}

// GetTicketsByUserID mocks base method.
func (m *MockTicketRepository) GetTicketsByUserID(ctx context.Context, userId uuid.UUID) ([]*ent.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketsByUserID", ctx, userId)
	ret0, _ := ret[0].([]*ent.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketsByUserID indicates an expected call of GetTicketsByUserID.
func (mr *MockTicketRepositoryMockRecorder) GetTicketsByUserID(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketsByUserID", reflect.TypeOf((*MockTicketRepository)(nil).GetTicketsByUserID), ctx, userId)
}

// ReserveTicket mocks base method.
func (m *MockTicketRepository) ReserveTicket(ctx context.Context, sectionID, seatID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveTicket", ctx, sectionID, seatID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveTicket indicates an expected call of ReserveTicket.
func (mr *MockTicketRepositoryMockRecorder) ReserveTicket(ctx, sectionID, seatID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveTicket", reflect.TypeOf((*MockTicketRepository)(nil).ReserveTicket), ctx, sectionID, seatID, userID)
}

// UpdateTicket mocks base method.
func (m *MockTicketRepository) UpdateTicket(ctx context.Context, ticket *ent.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, ticket)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockTicketRepositoryMockRecorder) UpdateTicket(ctx, ticket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockTicketRepository)(nil).UpdateTicket), ctx, ticket)
}

// UpdateTicketStatus mocks base method.
func (m *MockTicketRepository) UpdateTicketStatus(ctx context.Context, ticketID uuid.UUID, status ticket.Status, userID uuid.UUID) (*ent.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicketStatus", ctx, ticketID, status, userID)
	ret0, _ := ret[0].(*ent.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicketStatus indicates an expected call of UpdateTicketStatus.
func (mr *MockTicketRepositoryMockRecorder) UpdateTicketStatus(ctx, ticketID, status, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicketStatus", reflect.TypeOf((*MockTicketRepository)(nil).UpdateTicketStatus), ctx, ticketID, status, userID)
}
