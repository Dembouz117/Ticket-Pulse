// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"ticketing/ent/concertsession"
	"ticketing/ent/section"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Section is the model entity for the Section schema.
type Section struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Capacity holds the value of the "capacity" field.
	Capacity int `json:"capacity,omitempty"`
	// Reserved holds the value of the "reserved" field.
	Reserved int `json:"reserved,omitempty"`
	// Bought holds the value of the "bought" field.
	Bought int `json:"bought,omitempty"`
	// Category holds the value of the "category" field.
	Category section.Category `json:"category,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SectionQuery when eager-loading is set.
	Edges                        SectionEdges `json:"edges"`
	concert_session_has_sections *uuid.UUID
	selectValues                 sql.SelectValues
}

// SectionEdges holds the relations/edges for other nodes in the graph.
type SectionEdges struct {
	// HasTickets holds the value of the hasTickets edge.
	HasTickets []*Ticket `json:"hasTickets,omitempty"`
	// AtConcertSession holds the value of the atConcertSession edge.
	AtConcertSession *ConcertSession `json:"atConcertSession,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HasTicketsOrErr returns the HasTickets value or an error if the edge
// was not loaded in eager-loading.
func (e SectionEdges) HasTicketsOrErr() ([]*Ticket, error) {
	if e.loadedTypes[0] {
		return e.HasTickets, nil
	}
	return nil, &NotLoadedError{edge: "hasTickets"}
}

// AtConcertSessionOrErr returns the AtConcertSession value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SectionEdges) AtConcertSessionOrErr() (*ConcertSession, error) {
	if e.loadedTypes[1] {
		if e.AtConcertSession == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: concertsession.Label}
		}
		return e.AtConcertSession, nil
	}
	return nil, &NotLoadedError{edge: "atConcertSession"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Section) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case section.FieldCapacity, section.FieldReserved, section.FieldBought, section.FieldPrice:
			values[i] = new(sql.NullInt64)
		case section.FieldName, section.FieldCategory:
			values[i] = new(sql.NullString)
		case section.FieldID:
			values[i] = new(uuid.UUID)
		case section.ForeignKeys[0]: // concert_session_has_sections
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Section fields.
func (s *Section) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case section.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case section.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case section.FieldCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capacity", values[i])
			} else if value.Valid {
				s.Capacity = int(value.Int64)
			}
		case section.FieldReserved:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reserved", values[i])
			} else if value.Valid {
				s.Reserved = int(value.Int64)
			}
		case section.FieldBought:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bought", values[i])
			} else if value.Valid {
				s.Bought = int(value.Int64)
			}
		case section.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				s.Category = section.Category(value.String)
			}
		case section.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				s.Price = int(value.Int64)
			}
		case section.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field concert_session_has_sections", values[i])
			} else if value.Valid {
				s.concert_session_has_sections = new(uuid.UUID)
				*s.concert_session_has_sections = *value.S.(*uuid.UUID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Section.
// This includes values selected through modifiers, order, etc.
func (s *Section) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryHasTickets queries the "hasTickets" edge of the Section entity.
func (s *Section) QueryHasTickets() *TicketQuery {
	return NewSectionClient(s.config).QueryHasTickets(s)
}

// QueryAtConcertSession queries the "atConcertSession" edge of the Section entity.
func (s *Section) QueryAtConcertSession() *ConcertSessionQuery {
	return NewSectionClient(s.config).QueryAtConcertSession(s)
}

// Update returns a builder for updating this Section.
// Note that you need to call Section.Unwrap() before calling this method if this Section
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Section) Update() *SectionUpdateOne {
	return NewSectionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Section entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Section) Unwrap() *Section {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Section is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Section) String() string {
	var builder strings.Builder
	builder.WriteString("Section(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("capacity=")
	builder.WriteString(fmt.Sprintf("%v", s.Capacity))
	builder.WriteString(", ")
	builder.WriteString("reserved=")
	builder.WriteString(fmt.Sprintf("%v", s.Reserved))
	builder.WriteString(", ")
	builder.WriteString("bought=")
	builder.WriteString(fmt.Sprintf("%v", s.Bought))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", s.Category))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", s.Price))
	builder.WriteByte(')')
	return builder.String()
}

// Sections is a parsable slice of Section.
type Sections []*Section
