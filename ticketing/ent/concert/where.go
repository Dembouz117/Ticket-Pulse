// Code generated by ent, DO NOT EDIT.

package concert

import (
	"ticketing/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Concert {
	return predicate.Concert(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Concert {
	return predicate.Concert(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Concert {
	return predicate.Concert(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Concert {
	return predicate.Concert(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Concert {
	return predicate.Concert(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Concert {
	return predicate.Concert(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Concert {
	return predicate.Concert(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldTitle, v))
}

// Artist applies equality check predicate on the "artist" field. It's identical to ArtistEQ.
func Artist(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldArtist, v))
}

// ImageUrl applies equality check predicate on the "imageUrl" field. It's identical to ImageUrlEQ.
func ImageUrl(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldImageUrl, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldDescription, v))
}

// Headline applies equality check predicate on the "headline" field. It's identical to HeadlineEQ.
func Headline(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldHeadline, v))
}

// Featured applies equality check predicate on the "featured" field. It's identical to FeaturedEQ.
func Featured(v bool) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldFeatured, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Concert {
	return predicate.Concert(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Concert {
	return predicate.Concert(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Concert {
	return predicate.Concert(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Concert {
	return predicate.Concert(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Concert {
	return predicate.Concert(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Concert {
	return predicate.Concert(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Concert {
	return predicate.Concert(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Concert {
	return predicate.Concert(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Concert {
	return predicate.Concert(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Concert {
	return predicate.Concert(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Concert {
	return predicate.Concert(sql.FieldContainsFold(FieldTitle, v))
}

// ArtistEQ applies the EQ predicate on the "artist" field.
func ArtistEQ(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldArtist, v))
}

// ArtistNEQ applies the NEQ predicate on the "artist" field.
func ArtistNEQ(v string) predicate.Concert {
	return predicate.Concert(sql.FieldNEQ(FieldArtist, v))
}

// ArtistIn applies the In predicate on the "artist" field.
func ArtistIn(vs ...string) predicate.Concert {
	return predicate.Concert(sql.FieldIn(FieldArtist, vs...))
}

// ArtistNotIn applies the NotIn predicate on the "artist" field.
func ArtistNotIn(vs ...string) predicate.Concert {
	return predicate.Concert(sql.FieldNotIn(FieldArtist, vs...))
}

// ArtistGT applies the GT predicate on the "artist" field.
func ArtistGT(v string) predicate.Concert {
	return predicate.Concert(sql.FieldGT(FieldArtist, v))
}

// ArtistGTE applies the GTE predicate on the "artist" field.
func ArtistGTE(v string) predicate.Concert {
	return predicate.Concert(sql.FieldGTE(FieldArtist, v))
}

// ArtistLT applies the LT predicate on the "artist" field.
func ArtistLT(v string) predicate.Concert {
	return predicate.Concert(sql.FieldLT(FieldArtist, v))
}

// ArtistLTE applies the LTE predicate on the "artist" field.
func ArtistLTE(v string) predicate.Concert {
	return predicate.Concert(sql.FieldLTE(FieldArtist, v))
}

// ArtistContains applies the Contains predicate on the "artist" field.
func ArtistContains(v string) predicate.Concert {
	return predicate.Concert(sql.FieldContains(FieldArtist, v))
}

// ArtistHasPrefix applies the HasPrefix predicate on the "artist" field.
func ArtistHasPrefix(v string) predicate.Concert {
	return predicate.Concert(sql.FieldHasPrefix(FieldArtist, v))
}

// ArtistHasSuffix applies the HasSuffix predicate on the "artist" field.
func ArtistHasSuffix(v string) predicate.Concert {
	return predicate.Concert(sql.FieldHasSuffix(FieldArtist, v))
}

// ArtistEqualFold applies the EqualFold predicate on the "artist" field.
func ArtistEqualFold(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEqualFold(FieldArtist, v))
}

// ArtistContainsFold applies the ContainsFold predicate on the "artist" field.
func ArtistContainsFold(v string) predicate.Concert {
	return predicate.Concert(sql.FieldContainsFold(FieldArtist, v))
}

// ImageUrlEQ applies the EQ predicate on the "imageUrl" field.
func ImageUrlEQ(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldImageUrl, v))
}

// ImageUrlNEQ applies the NEQ predicate on the "imageUrl" field.
func ImageUrlNEQ(v string) predicate.Concert {
	return predicate.Concert(sql.FieldNEQ(FieldImageUrl, v))
}

// ImageUrlIn applies the In predicate on the "imageUrl" field.
func ImageUrlIn(vs ...string) predicate.Concert {
	return predicate.Concert(sql.FieldIn(FieldImageUrl, vs...))
}

// ImageUrlNotIn applies the NotIn predicate on the "imageUrl" field.
func ImageUrlNotIn(vs ...string) predicate.Concert {
	return predicate.Concert(sql.FieldNotIn(FieldImageUrl, vs...))
}

// ImageUrlGT applies the GT predicate on the "imageUrl" field.
func ImageUrlGT(v string) predicate.Concert {
	return predicate.Concert(sql.FieldGT(FieldImageUrl, v))
}

// ImageUrlGTE applies the GTE predicate on the "imageUrl" field.
func ImageUrlGTE(v string) predicate.Concert {
	return predicate.Concert(sql.FieldGTE(FieldImageUrl, v))
}

// ImageUrlLT applies the LT predicate on the "imageUrl" field.
func ImageUrlLT(v string) predicate.Concert {
	return predicate.Concert(sql.FieldLT(FieldImageUrl, v))
}

// ImageUrlLTE applies the LTE predicate on the "imageUrl" field.
func ImageUrlLTE(v string) predicate.Concert {
	return predicate.Concert(sql.FieldLTE(FieldImageUrl, v))
}

// ImageUrlContains applies the Contains predicate on the "imageUrl" field.
func ImageUrlContains(v string) predicate.Concert {
	return predicate.Concert(sql.FieldContains(FieldImageUrl, v))
}

// ImageUrlHasPrefix applies the HasPrefix predicate on the "imageUrl" field.
func ImageUrlHasPrefix(v string) predicate.Concert {
	return predicate.Concert(sql.FieldHasPrefix(FieldImageUrl, v))
}

// ImageUrlHasSuffix applies the HasSuffix predicate on the "imageUrl" field.
func ImageUrlHasSuffix(v string) predicate.Concert {
	return predicate.Concert(sql.FieldHasSuffix(FieldImageUrl, v))
}

// ImageUrlEqualFold applies the EqualFold predicate on the "imageUrl" field.
func ImageUrlEqualFold(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEqualFold(FieldImageUrl, v))
}

// ImageUrlContainsFold applies the ContainsFold predicate on the "imageUrl" field.
func ImageUrlContainsFold(v string) predicate.Concert {
	return predicate.Concert(sql.FieldContainsFold(FieldImageUrl, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Concert {
	return predicate.Concert(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Concert {
	return predicate.Concert(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Concert {
	return predicate.Concert(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Concert {
	return predicate.Concert(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Concert {
	return predicate.Concert(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Concert {
	return predicate.Concert(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Concert {
	return predicate.Concert(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Concert {
	return predicate.Concert(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Concert {
	return predicate.Concert(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Concert {
	return predicate.Concert(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Concert {
	return predicate.Concert(sql.FieldContainsFold(FieldDescription, v))
}

// HeadlineEQ applies the EQ predicate on the "headline" field.
func HeadlineEQ(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldHeadline, v))
}

// HeadlineNEQ applies the NEQ predicate on the "headline" field.
func HeadlineNEQ(v string) predicate.Concert {
	return predicate.Concert(sql.FieldNEQ(FieldHeadline, v))
}

// HeadlineIn applies the In predicate on the "headline" field.
func HeadlineIn(vs ...string) predicate.Concert {
	return predicate.Concert(sql.FieldIn(FieldHeadline, vs...))
}

// HeadlineNotIn applies the NotIn predicate on the "headline" field.
func HeadlineNotIn(vs ...string) predicate.Concert {
	return predicate.Concert(sql.FieldNotIn(FieldHeadline, vs...))
}

// HeadlineGT applies the GT predicate on the "headline" field.
func HeadlineGT(v string) predicate.Concert {
	return predicate.Concert(sql.FieldGT(FieldHeadline, v))
}

// HeadlineGTE applies the GTE predicate on the "headline" field.
func HeadlineGTE(v string) predicate.Concert {
	return predicate.Concert(sql.FieldGTE(FieldHeadline, v))
}

// HeadlineLT applies the LT predicate on the "headline" field.
func HeadlineLT(v string) predicate.Concert {
	return predicate.Concert(sql.FieldLT(FieldHeadline, v))
}

// HeadlineLTE applies the LTE predicate on the "headline" field.
func HeadlineLTE(v string) predicate.Concert {
	return predicate.Concert(sql.FieldLTE(FieldHeadline, v))
}

// HeadlineContains applies the Contains predicate on the "headline" field.
func HeadlineContains(v string) predicate.Concert {
	return predicate.Concert(sql.FieldContains(FieldHeadline, v))
}

// HeadlineHasPrefix applies the HasPrefix predicate on the "headline" field.
func HeadlineHasPrefix(v string) predicate.Concert {
	return predicate.Concert(sql.FieldHasPrefix(FieldHeadline, v))
}

// HeadlineHasSuffix applies the HasSuffix predicate on the "headline" field.
func HeadlineHasSuffix(v string) predicate.Concert {
	return predicate.Concert(sql.FieldHasSuffix(FieldHeadline, v))
}

// HeadlineEqualFold applies the EqualFold predicate on the "headline" field.
func HeadlineEqualFold(v string) predicate.Concert {
	return predicate.Concert(sql.FieldEqualFold(FieldHeadline, v))
}

// HeadlineContainsFold applies the ContainsFold predicate on the "headline" field.
func HeadlineContainsFold(v string) predicate.Concert {
	return predicate.Concert(sql.FieldContainsFold(FieldHeadline, v))
}

// FeaturedEQ applies the EQ predicate on the "featured" field.
func FeaturedEQ(v bool) predicate.Concert {
	return predicate.Concert(sql.FieldEQ(FieldFeatured, v))
}

// FeaturedNEQ applies the NEQ predicate on the "featured" field.
func FeaturedNEQ(v bool) predicate.Concert {
	return predicate.Concert(sql.FieldNEQ(FieldFeatured, v))
}

// HasHasConcertSessions applies the HasEdge predicate on the "hasConcertSessions" edge.
func HasHasConcertSessions() predicate.Concert {
	return predicate.Concert(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HasConcertSessionsTable, HasConcertSessionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHasConcertSessionsWith applies the HasEdge predicate on the "hasConcertSessions" edge with a given conditions (other predicates).
func HasHasConcertSessionsWith(preds ...predicate.ConcertSession) predicate.Concert {
	return predicate.Concert(func(s *sql.Selector) {
		step := newHasConcertSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGenres applies the HasEdge predicate on the "genres" edge.
func HasGenres() predicate.Concert {
	return predicate.Concert(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, GenresTable, GenresPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenresWith applies the HasEdge predicate on the "genres" edge with a given conditions (other predicates).
func HasGenresWith(preds ...predicate.Genre) predicate.Concert {
	return predicate.Concert(func(s *sql.Selector) {
		step := newGenresStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Concert) predicate.Concert {
	return predicate.Concert(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Concert) predicate.Concert {
	return predicate.Concert(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Concert) predicate.Concert {
	return predicate.Concert(sql.NotPredicates(p))
}
