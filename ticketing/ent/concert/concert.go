// Code generated by ent, DO NOT EDIT.

package concert

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the concert type in the database.
	Label = "concert"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldArtist holds the string denoting the artist field in the database.
	FieldArtist = "artist"
	// FieldImageUrl holds the string denoting the imageurl field in the database.
	FieldImageUrl = "image_url"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldHeadline holds the string denoting the headline field in the database.
	FieldHeadline = "headline"
	// FieldFeatured holds the string denoting the featured field in the database.
	FieldFeatured = "featured"
	// EdgeHasConcertSessions holds the string denoting the hasconcertsessions edge name in mutations.
	EdgeHasConcertSessions = "hasConcertSessions"
	// EdgeGenres holds the string denoting the genres edge name in mutations.
	EdgeGenres = "genres"
	// Table holds the table name of the concert in the database.
	Table = "concerts"
	// HasConcertSessionsTable is the table that holds the hasConcertSessions relation/edge. The primary key declared below.
	HasConcertSessionsTable = "concert_hasConcertSessions"
	// HasConcertSessionsInverseTable is the table name for the ConcertSession entity.
	// It exists in this package in order to avoid circular dependency with the "concertsession" package.
	HasConcertSessionsInverseTable = "concert_sessions"
	// GenresTable is the table that holds the genres relation/edge. The primary key declared below.
	GenresTable = "concert_genres"
	// GenresInverseTable is the table name for the Genre entity.
	// It exists in this package in order to avoid circular dependency with the "genre" package.
	GenresInverseTable = "genres"
)

// Columns holds all SQL columns for concert fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldArtist,
	FieldImageUrl,
	FieldDescription,
	FieldHeadline,
	FieldFeatured,
}

var (
	// HasConcertSessionsPrimaryKey and HasConcertSessionsColumn2 are the table columns denoting the
	// primary key for the hasConcertSessions relation (M2M).
	HasConcertSessionsPrimaryKey = []string{"concert_id", "concert_session_id"}
	// GenresPrimaryKey and GenresColumn2 are the table columns denoting the
	// primary key for the genres relation (M2M).
	GenresPrimaryKey = []string{"concert_id", "genre_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ArtistValidator is a validator for the "artist" field. It is called by the builders before save.
	ArtistValidator func(string) error
	// ImageUrlValidator is a validator for the "imageUrl" field. It is called by the builders before save.
	ImageUrlValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultHeadline holds the default value on creation for the "headline" field.
	DefaultHeadline string
	// DefaultFeatured holds the default value on creation for the "featured" field.
	DefaultFeatured bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Concert queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByArtist orders the results by the artist field.
func ByArtist(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtist, opts...).ToFunc()
}

// ByImageUrl orders the results by the imageUrl field.
func ByImageUrl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageUrl, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByHeadline orders the results by the headline field.
func ByHeadline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeadline, opts...).ToFunc()
}

// ByFeatured orders the results by the featured field.
func ByFeatured(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatured, opts...).ToFunc()
}

// ByHasConcertSessionsCount orders the results by hasConcertSessions count.
func ByHasConcertSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHasConcertSessionsStep(), opts...)
	}
}

// ByHasConcertSessions orders the results by hasConcertSessions terms.
func ByHasConcertSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHasConcertSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGenresCount orders the results by genres count.
func ByGenresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGenresStep(), opts...)
	}
}

// ByGenres orders the results by genres terms.
func ByGenres(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGenresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHasConcertSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HasConcertSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, HasConcertSessionsTable, HasConcertSessionsPrimaryKey...),
	)
}
func newGenresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GenresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, GenresTable, GenresPrimaryKey...),
	)
}
