// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"ticketing/ent/section"
	"ticketing/ent/ticket"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SeatNumber holds the value of the "seatNumber" field.
	SeatNumber int `json:"seatNumber,omitempty"`
	// Status holds the value of the "status" field.
	Status ticket.Status `json:"status,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId uuid.UUID `json:"userId,omitempty"`
	// ReservedAt holds the value of the "reservedAt" field.
	ReservedAt *int `json:"reservedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketQuery when eager-loading is set.
	Edges               TicketEdges `json:"edges"`
	section_has_tickets *uuid.UUID
	selectValues        sql.SelectValues
}

// TicketEdges holds the relations/edges for other nodes in the graph.
type TicketEdges struct {
	// WithinSection holds the value of the withinSection edge.
	WithinSection *Section `json:"withinSection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WithinSectionOrErr returns the WithinSection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) WithinSectionOrErr() (*Section, error) {
	if e.loadedTypes[0] {
		if e.WithinSection == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: section.Label}
		}
		return e.WithinSection, nil
	}
	return nil, &NotLoadedError{edge: "withinSection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldSeatNumber, ticket.FieldReservedAt:
			values[i] = new(sql.NullInt64)
		case ticket.FieldStatus:
			values[i] = new(sql.NullString)
		case ticket.FieldID, ticket.FieldUserId:
			values[i] = new(uuid.UUID)
		case ticket.ForeignKeys[0]: // section_has_tickets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case ticket.FieldSeatNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seatNumber", values[i])
			} else if value.Valid {
				t.SeatNumber = int(value.Int64)
			}
		case ticket.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = ticket.Status(value.String)
			}
		case ticket.FieldUserId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value != nil {
				t.UserId = *value
			}
		case ticket.FieldReservedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reservedAt", values[i])
			} else if value.Valid {
				t.ReservedAt = new(int)
				*t.ReservedAt = int(value.Int64)
			}
		case ticket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field section_has_tickets", values[i])
			} else if value.Valid {
				t.section_has_tickets = new(uuid.UUID)
				*t.section_has_tickets = *value.S.(*uuid.UUID)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ticket.
// This includes values selected through modifiers, order, etc.
func (t *Ticket) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryWithinSection queries the "withinSection" edge of the Ticket entity.
func (t *Ticket) QueryWithinSection() *SectionQuery {
	return NewTicketClient(t.config).QueryWithinSection(t)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return NewTicketClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("seatNumber=")
	builder.WriteString(fmt.Sprintf("%v", t.SeatNumber))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", t.UserId))
	builder.WriteString(", ")
	if v := t.ReservedAt; v != nil {
		builder.WriteString("reservedAt=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket
