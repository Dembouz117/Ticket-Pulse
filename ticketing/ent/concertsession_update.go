// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ticketing/ent/concert"
	"ticketing/ent/concertsession"
	"ticketing/ent/predicate"
	"ticketing/ent/section"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConcertSessionUpdate is the builder for updating ConcertSession entities.
type ConcertSessionUpdate struct {
	config
	hooks    []Hook
	mutation *ConcertSessionMutation
}

// Where appends a list predicates to the ConcertSessionUpdate builder.
func (csu *ConcertSessionUpdate) Where(ps ...predicate.ConcertSession) *ConcertSessionUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetSessionDateTime sets the "sessionDateTime" field.
func (csu *ConcertSessionUpdate) SetSessionDateTime(i int) *ConcertSessionUpdate {
	csu.mutation.ResetSessionDateTime()
	csu.mutation.SetSessionDateTime(i)
	return csu
}

// AddSessionDateTime adds i to the "sessionDateTime" field.
func (csu *ConcertSessionUpdate) AddSessionDateTime(i int) *ConcertSessionUpdate {
	csu.mutation.AddSessionDateTime(i)
	return csu
}

// AddOfConcertIDs adds the "ofConcert" edge to the Concert entity by IDs.
func (csu *ConcertSessionUpdate) AddOfConcertIDs(ids ...uuid.UUID) *ConcertSessionUpdate {
	csu.mutation.AddOfConcertIDs(ids...)
	return csu
}

// AddOfConcert adds the "ofConcert" edges to the Concert entity.
func (csu *ConcertSessionUpdate) AddOfConcert(c ...*Concert) *ConcertSessionUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.AddOfConcertIDs(ids...)
}

// AddHasSectionIDs adds the "hasSections" edge to the Section entity by IDs.
func (csu *ConcertSessionUpdate) AddHasSectionIDs(ids ...uuid.UUID) *ConcertSessionUpdate {
	csu.mutation.AddHasSectionIDs(ids...)
	return csu
}

// AddHasSections adds the "hasSections" edges to the Section entity.
func (csu *ConcertSessionUpdate) AddHasSections(s ...*Section) *ConcertSessionUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return csu.AddHasSectionIDs(ids...)
}

// Mutation returns the ConcertSessionMutation object of the builder.
func (csu *ConcertSessionUpdate) Mutation() *ConcertSessionMutation {
	return csu.mutation
}

// ClearOfConcert clears all "ofConcert" edges to the Concert entity.
func (csu *ConcertSessionUpdate) ClearOfConcert() *ConcertSessionUpdate {
	csu.mutation.ClearOfConcert()
	return csu
}

// RemoveOfConcertIDs removes the "ofConcert" edge to Concert entities by IDs.
func (csu *ConcertSessionUpdate) RemoveOfConcertIDs(ids ...uuid.UUID) *ConcertSessionUpdate {
	csu.mutation.RemoveOfConcertIDs(ids...)
	return csu
}

// RemoveOfConcert removes "ofConcert" edges to Concert entities.
func (csu *ConcertSessionUpdate) RemoveOfConcert(c ...*Concert) *ConcertSessionUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.RemoveOfConcertIDs(ids...)
}

// ClearHasSections clears all "hasSections" edges to the Section entity.
func (csu *ConcertSessionUpdate) ClearHasSections() *ConcertSessionUpdate {
	csu.mutation.ClearHasSections()
	return csu
}

// RemoveHasSectionIDs removes the "hasSections" edge to Section entities by IDs.
func (csu *ConcertSessionUpdate) RemoveHasSectionIDs(ids ...uuid.UUID) *ConcertSessionUpdate {
	csu.mutation.RemoveHasSectionIDs(ids...)
	return csu
}

// RemoveHasSections removes "hasSections" edges to Section entities.
func (csu *ConcertSessionUpdate) RemoveHasSections(s ...*Section) *ConcertSessionUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return csu.RemoveHasSectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *ConcertSessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *ConcertSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *ConcertSessionUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *ConcertSessionUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csu *ConcertSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(concertsession.Table, concertsession.Columns, sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.SessionDateTime(); ok {
		_spec.SetField(concertsession.FieldSessionDateTime, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedSessionDateTime(); ok {
		_spec.AddField(concertsession.FieldSessionDateTime, field.TypeInt, value)
	}
	if csu.mutation.OfConcertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   concertsession.OfConcertTable,
			Columns: concertsession.OfConcertPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.RemovedOfConcertIDs(); len(nodes) > 0 && !csu.mutation.OfConcertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   concertsession.OfConcertTable,
			Columns: concertsession.OfConcertPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.OfConcertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   concertsession.OfConcertTable,
			Columns: concertsession.OfConcertPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.HasSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   concertsession.HasSectionsTable,
			Columns: []string{concertsession.HasSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.RemovedHasSectionsIDs(); len(nodes) > 0 && !csu.mutation.HasSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   concertsession.HasSectionsTable,
			Columns: []string{concertsession.HasSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.HasSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   concertsession.HasSectionsTable,
			Columns: []string{concertsession.HasSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concertsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// ConcertSessionUpdateOne is the builder for updating a single ConcertSession entity.
type ConcertSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConcertSessionMutation
}

// SetSessionDateTime sets the "sessionDateTime" field.
func (csuo *ConcertSessionUpdateOne) SetSessionDateTime(i int) *ConcertSessionUpdateOne {
	csuo.mutation.ResetSessionDateTime()
	csuo.mutation.SetSessionDateTime(i)
	return csuo
}

// AddSessionDateTime adds i to the "sessionDateTime" field.
func (csuo *ConcertSessionUpdateOne) AddSessionDateTime(i int) *ConcertSessionUpdateOne {
	csuo.mutation.AddSessionDateTime(i)
	return csuo
}

// AddOfConcertIDs adds the "ofConcert" edge to the Concert entity by IDs.
func (csuo *ConcertSessionUpdateOne) AddOfConcertIDs(ids ...uuid.UUID) *ConcertSessionUpdateOne {
	csuo.mutation.AddOfConcertIDs(ids...)
	return csuo
}

// AddOfConcert adds the "ofConcert" edges to the Concert entity.
func (csuo *ConcertSessionUpdateOne) AddOfConcert(c ...*Concert) *ConcertSessionUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.AddOfConcertIDs(ids...)
}

// AddHasSectionIDs adds the "hasSections" edge to the Section entity by IDs.
func (csuo *ConcertSessionUpdateOne) AddHasSectionIDs(ids ...uuid.UUID) *ConcertSessionUpdateOne {
	csuo.mutation.AddHasSectionIDs(ids...)
	return csuo
}

// AddHasSections adds the "hasSections" edges to the Section entity.
func (csuo *ConcertSessionUpdateOne) AddHasSections(s ...*Section) *ConcertSessionUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return csuo.AddHasSectionIDs(ids...)
}

// Mutation returns the ConcertSessionMutation object of the builder.
func (csuo *ConcertSessionUpdateOne) Mutation() *ConcertSessionMutation {
	return csuo.mutation
}

// ClearOfConcert clears all "ofConcert" edges to the Concert entity.
func (csuo *ConcertSessionUpdateOne) ClearOfConcert() *ConcertSessionUpdateOne {
	csuo.mutation.ClearOfConcert()
	return csuo
}

// RemoveOfConcertIDs removes the "ofConcert" edge to Concert entities by IDs.
func (csuo *ConcertSessionUpdateOne) RemoveOfConcertIDs(ids ...uuid.UUID) *ConcertSessionUpdateOne {
	csuo.mutation.RemoveOfConcertIDs(ids...)
	return csuo
}

// RemoveOfConcert removes "ofConcert" edges to Concert entities.
func (csuo *ConcertSessionUpdateOne) RemoveOfConcert(c ...*Concert) *ConcertSessionUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.RemoveOfConcertIDs(ids...)
}

// ClearHasSections clears all "hasSections" edges to the Section entity.
func (csuo *ConcertSessionUpdateOne) ClearHasSections() *ConcertSessionUpdateOne {
	csuo.mutation.ClearHasSections()
	return csuo
}

// RemoveHasSectionIDs removes the "hasSections" edge to Section entities by IDs.
func (csuo *ConcertSessionUpdateOne) RemoveHasSectionIDs(ids ...uuid.UUID) *ConcertSessionUpdateOne {
	csuo.mutation.RemoveHasSectionIDs(ids...)
	return csuo
}

// RemoveHasSections removes "hasSections" edges to Section entities.
func (csuo *ConcertSessionUpdateOne) RemoveHasSections(s ...*Section) *ConcertSessionUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return csuo.RemoveHasSectionIDs(ids...)
}

// Where appends a list predicates to the ConcertSessionUpdate builder.
func (csuo *ConcertSessionUpdateOne) Where(ps ...predicate.ConcertSession) *ConcertSessionUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *ConcertSessionUpdateOne) Select(field string, fields ...string) *ConcertSessionUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated ConcertSession entity.
func (csuo *ConcertSessionUpdateOne) Save(ctx context.Context) (*ConcertSession, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *ConcertSessionUpdateOne) SaveX(ctx context.Context) *ConcertSession {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *ConcertSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *ConcertSessionUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csuo *ConcertSessionUpdateOne) sqlSave(ctx context.Context) (_node *ConcertSession, err error) {
	_spec := sqlgraph.NewUpdateSpec(concertsession.Table, concertsession.Columns, sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConcertSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, concertsession.FieldID)
		for _, f := range fields {
			if !concertsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != concertsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.SessionDateTime(); ok {
		_spec.SetField(concertsession.FieldSessionDateTime, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedSessionDateTime(); ok {
		_spec.AddField(concertsession.FieldSessionDateTime, field.TypeInt, value)
	}
	if csuo.mutation.OfConcertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   concertsession.OfConcertTable,
			Columns: concertsession.OfConcertPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.RemovedOfConcertIDs(); len(nodes) > 0 && !csuo.mutation.OfConcertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   concertsession.OfConcertTable,
			Columns: concertsession.OfConcertPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.OfConcertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   concertsession.OfConcertTable,
			Columns: concertsession.OfConcertPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.HasSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   concertsession.HasSectionsTable,
			Columns: []string{concertsession.HasSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.RemovedHasSectionsIDs(); len(nodes) > 0 && !csuo.mutation.HasSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   concertsession.HasSectionsTable,
			Columns: []string{concertsession.HasSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.HasSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   concertsession.HasSectionsTable,
			Columns: []string{concertsession.HasSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConcertSession{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concertsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
