// Code generated by ent, DO NOT EDIT.

package concertsession

import (
	"ticketing/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldLTE(FieldID, id))
}

// SessionDateTime applies equality check predicate on the "sessionDateTime" field. It's identical to SessionDateTimeEQ.
func SessionDateTime(v int) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldEQ(FieldSessionDateTime, v))
}

// SessionDateTimeEQ applies the EQ predicate on the "sessionDateTime" field.
func SessionDateTimeEQ(v int) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldEQ(FieldSessionDateTime, v))
}

// SessionDateTimeNEQ applies the NEQ predicate on the "sessionDateTime" field.
func SessionDateTimeNEQ(v int) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldNEQ(FieldSessionDateTime, v))
}

// SessionDateTimeIn applies the In predicate on the "sessionDateTime" field.
func SessionDateTimeIn(vs ...int) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldIn(FieldSessionDateTime, vs...))
}

// SessionDateTimeNotIn applies the NotIn predicate on the "sessionDateTime" field.
func SessionDateTimeNotIn(vs ...int) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldNotIn(FieldSessionDateTime, vs...))
}

// SessionDateTimeGT applies the GT predicate on the "sessionDateTime" field.
func SessionDateTimeGT(v int) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldGT(FieldSessionDateTime, v))
}

// SessionDateTimeGTE applies the GTE predicate on the "sessionDateTime" field.
func SessionDateTimeGTE(v int) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldGTE(FieldSessionDateTime, v))
}

// SessionDateTimeLT applies the LT predicate on the "sessionDateTime" field.
func SessionDateTimeLT(v int) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldLT(FieldSessionDateTime, v))
}

// SessionDateTimeLTE applies the LTE predicate on the "sessionDateTime" field.
func SessionDateTimeLTE(v int) predicate.ConcertSession {
	return predicate.ConcertSession(sql.FieldLTE(FieldSessionDateTime, v))
}

// HasOfConcert applies the HasEdge predicate on the "ofConcert" edge.
func HasOfConcert() predicate.ConcertSession {
	return predicate.ConcertSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OfConcertTable, OfConcertPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOfConcertWith applies the HasEdge predicate on the "ofConcert" edge with a given conditions (other predicates).
func HasOfConcertWith(preds ...predicate.Concert) predicate.ConcertSession {
	return predicate.ConcertSession(func(s *sql.Selector) {
		step := newOfConcertStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHasSections applies the HasEdge predicate on the "hasSections" edge.
func HasHasSections() predicate.ConcertSession {
	return predicate.ConcertSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HasSectionsTable, HasSectionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHasSectionsWith applies the HasEdge predicate on the "hasSections" edge with a given conditions (other predicates).
func HasHasSectionsWith(preds ...predicate.Section) predicate.ConcertSession {
	return predicate.ConcertSession(func(s *sql.Selector) {
		step := newHasSectionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConcertSession) predicate.ConcertSession {
	return predicate.ConcertSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConcertSession) predicate.ConcertSession {
	return predicate.ConcertSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConcertSession) predicate.ConcertSession {
	return predicate.ConcertSession(sql.NotPredicates(p))
}
