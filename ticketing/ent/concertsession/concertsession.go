// Code generated by ent, DO NOT EDIT.

package concertsession

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the concertsession type in the database.
	Label = "concert_session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSessionDateTime holds the string denoting the sessiondatetime field in the database.
	FieldSessionDateTime = "session_date_time"
	// EdgeOfConcert holds the string denoting the ofconcert edge name in mutations.
	EdgeOfConcert = "ofConcert"
	// EdgeHasSections holds the string denoting the hassections edge name in mutations.
	EdgeHasSections = "hasSections"
	// Table holds the table name of the concertsession in the database.
	Table = "concert_sessions"
	// OfConcertTable is the table that holds the ofConcert relation/edge. The primary key declared below.
	OfConcertTable = "concert_hasConcertSessions"
	// OfConcertInverseTable is the table name for the Concert entity.
	// It exists in this package in order to avoid circular dependency with the "concert" package.
	OfConcertInverseTable = "concerts"
	// HasSectionsTable is the table that holds the hasSections relation/edge.
	HasSectionsTable = "sections"
	// HasSectionsInverseTable is the table name for the Section entity.
	// It exists in this package in order to avoid circular dependency with the "section" package.
	HasSectionsInverseTable = "sections"
	// HasSectionsColumn is the table column denoting the hasSections relation/edge.
	HasSectionsColumn = "concert_session_has_sections"
)

// Columns holds all SQL columns for concertsession fields.
var Columns = []string{
	FieldID,
	FieldSessionDateTime,
}

var (
	// OfConcertPrimaryKey and OfConcertColumn2 are the table columns denoting the
	// primary key for the ofConcert relation (M2M).
	OfConcertPrimaryKey = []string{"concert_id", "concert_session_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ConcertSession queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySessionDateTime orders the results by the sessionDateTime field.
func BySessionDateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionDateTime, opts...).ToFunc()
}

// ByOfConcertCount orders the results by ofConcert count.
func ByOfConcertCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOfConcertStep(), opts...)
	}
}

// ByOfConcert orders the results by ofConcert terms.
func ByOfConcert(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOfConcertStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHasSectionsCount orders the results by hasSections count.
func ByHasSectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHasSectionsStep(), opts...)
	}
}

// ByHasSections orders the results by hasSections terms.
func ByHasSections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHasSectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOfConcertStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OfConcertInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OfConcertTable, OfConcertPrimaryKey...),
	)
}
func newHasSectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HasSectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HasSectionsTable, HasSectionsColumn),
	)
}
