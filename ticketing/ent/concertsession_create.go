// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ticketing/ent/concert"
	"ticketing/ent/concertsession"
	"ticketing/ent/section"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConcertSessionCreate is the builder for creating a ConcertSession entity.
type ConcertSessionCreate struct {
	config
	mutation *ConcertSessionMutation
	hooks    []Hook
}

// SetSessionDateTime sets the "sessionDateTime" field.
func (csc *ConcertSessionCreate) SetSessionDateTime(i int) *ConcertSessionCreate {
	csc.mutation.SetSessionDateTime(i)
	return csc
}

// SetID sets the "id" field.
func (csc *ConcertSessionCreate) SetID(u uuid.UUID) *ConcertSessionCreate {
	csc.mutation.SetID(u)
	return csc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csc *ConcertSessionCreate) SetNillableID(u *uuid.UUID) *ConcertSessionCreate {
	if u != nil {
		csc.SetID(*u)
	}
	return csc
}

// AddOfConcertIDs adds the "ofConcert" edge to the Concert entity by IDs.
func (csc *ConcertSessionCreate) AddOfConcertIDs(ids ...uuid.UUID) *ConcertSessionCreate {
	csc.mutation.AddOfConcertIDs(ids...)
	return csc
}

// AddOfConcert adds the "ofConcert" edges to the Concert entity.
func (csc *ConcertSessionCreate) AddOfConcert(c ...*Concert) *ConcertSessionCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csc.AddOfConcertIDs(ids...)
}

// AddHasSectionIDs adds the "hasSections" edge to the Section entity by IDs.
func (csc *ConcertSessionCreate) AddHasSectionIDs(ids ...uuid.UUID) *ConcertSessionCreate {
	csc.mutation.AddHasSectionIDs(ids...)
	return csc
}

// AddHasSections adds the "hasSections" edges to the Section entity.
func (csc *ConcertSessionCreate) AddHasSections(s ...*Section) *ConcertSessionCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return csc.AddHasSectionIDs(ids...)
}

// Mutation returns the ConcertSessionMutation object of the builder.
func (csc *ConcertSessionCreate) Mutation() *ConcertSessionMutation {
	return csc.mutation
}

// Save creates the ConcertSession in the database.
func (csc *ConcertSessionCreate) Save(ctx context.Context) (*ConcertSession, error) {
	csc.defaults()
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *ConcertSessionCreate) SaveX(ctx context.Context) *ConcertSession {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *ConcertSessionCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *ConcertSessionCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *ConcertSessionCreate) defaults() {
	if _, ok := csc.mutation.ID(); !ok {
		v := concertsession.DefaultID()
		csc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *ConcertSessionCreate) check() error {
	if _, ok := csc.mutation.SessionDateTime(); !ok {
		return &ValidationError{Name: "sessionDateTime", err: errors.New(`ent: missing required field "ConcertSession.sessionDateTime"`)}
	}
	if len(csc.mutation.OfConcertIDs()) == 0 {
		return &ValidationError{Name: "ofConcert", err: errors.New(`ent: missing required edge "ConcertSession.ofConcert"`)}
	}
	return nil
}

func (csc *ConcertSessionCreate) sqlSave(ctx context.Context) (*ConcertSession, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *ConcertSessionCreate) createSpec() (*ConcertSession, *sqlgraph.CreateSpec) {
	var (
		_node = &ConcertSession{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(concertsession.Table, sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID))
	)
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csc.mutation.SessionDateTime(); ok {
		_spec.SetField(concertsession.FieldSessionDateTime, field.TypeInt, value)
		_node.SessionDateTime = value
	}
	if nodes := csc.mutation.OfConcertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   concertsession.OfConcertTable,
			Columns: concertsession.OfConcertPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.HasSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   concertsession.HasSectionsTable,
			Columns: []string{concertsession.HasSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConcertSessionCreateBulk is the builder for creating many ConcertSession entities in bulk.
type ConcertSessionCreateBulk struct {
	config
	err      error
	builders []*ConcertSessionCreate
}

// Save creates the ConcertSession entities in the database.
func (cscb *ConcertSessionCreateBulk) Save(ctx context.Context) ([]*ConcertSession, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*ConcertSession, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConcertSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *ConcertSessionCreateBulk) SaveX(ctx context.Context) []*ConcertSession {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *ConcertSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *ConcertSessionCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
