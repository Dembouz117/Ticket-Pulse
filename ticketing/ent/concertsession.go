// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"ticketing/ent/concertsession"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ConcertSession is the model entity for the ConcertSession schema.
type ConcertSession struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SessionDateTime holds the value of the "sessionDateTime" field.
	SessionDateTime int `json:"sessionDateTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConcertSessionQuery when eager-loading is set.
	Edges        ConcertSessionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ConcertSessionEdges holds the relations/edges for other nodes in the graph.
type ConcertSessionEdges struct {
	// OfConcert holds the value of the ofConcert edge.
	OfConcert []*Concert `json:"ofConcert,omitempty"`
	// HasSections holds the value of the hasSections edge.
	HasSections []*Section `json:"hasSections,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OfConcertOrErr returns the OfConcert value or an error if the edge
// was not loaded in eager-loading.
func (e ConcertSessionEdges) OfConcertOrErr() ([]*Concert, error) {
	if e.loadedTypes[0] {
		return e.OfConcert, nil
	}
	return nil, &NotLoadedError{edge: "ofConcert"}
}

// HasSectionsOrErr returns the HasSections value or an error if the edge
// was not loaded in eager-loading.
func (e ConcertSessionEdges) HasSectionsOrErr() ([]*Section, error) {
	if e.loadedTypes[1] {
		return e.HasSections, nil
	}
	return nil, &NotLoadedError{edge: "hasSections"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConcertSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case concertsession.FieldSessionDateTime:
			values[i] = new(sql.NullInt64)
		case concertsession.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConcertSession fields.
func (cs *ConcertSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case concertsession.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cs.ID = *value
			}
		case concertsession.FieldSessionDateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sessionDateTime", values[i])
			} else if value.Valid {
				cs.SessionDateTime = int(value.Int64)
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConcertSession.
// This includes values selected through modifiers, order, etc.
func (cs *ConcertSession) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryOfConcert queries the "ofConcert" edge of the ConcertSession entity.
func (cs *ConcertSession) QueryOfConcert() *ConcertQuery {
	return NewConcertSessionClient(cs.config).QueryOfConcert(cs)
}

// QueryHasSections queries the "hasSections" edge of the ConcertSession entity.
func (cs *ConcertSession) QueryHasSections() *SectionQuery {
	return NewConcertSessionClient(cs.config).QueryHasSections(cs)
}

// Update returns a builder for updating this ConcertSession.
// Note that you need to call ConcertSession.Unwrap() before calling this method if this ConcertSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *ConcertSession) Update() *ConcertSessionUpdateOne {
	return NewConcertSessionClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the ConcertSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *ConcertSession) Unwrap() *ConcertSession {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConcertSession is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *ConcertSession) String() string {
	var builder strings.Builder
	builder.WriteString("ConcertSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("sessionDateTime=")
	builder.WriteString(fmt.Sprintf("%v", cs.SessionDateTime))
	builder.WriteByte(')')
	return builder.String()
}

// ConcertSessions is a parsable slice of ConcertSession.
type ConcertSessions []*ConcertSession
