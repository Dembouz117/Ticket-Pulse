// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"ticketing/ent/concert"
	"ticketing/ent/concertsession"
	"ticketing/ent/predicate"
	"ticketing/ent/section"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConcertSessionQuery is the builder for querying ConcertSession entities.
type ConcertSessionQuery struct {
	config
	ctx             *QueryContext
	order           []concertsession.OrderOption
	inters          []Interceptor
	predicates      []predicate.ConcertSession
	withOfConcert   *ConcertQuery
	withHasSections *SectionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ConcertSessionQuery builder.
func (csq *ConcertSessionQuery) Where(ps ...predicate.ConcertSession) *ConcertSessionQuery {
	csq.predicates = append(csq.predicates, ps...)
	return csq
}

// Limit the number of records to be returned by this query.
func (csq *ConcertSessionQuery) Limit(limit int) *ConcertSessionQuery {
	csq.ctx.Limit = &limit
	return csq
}

// Offset to start from.
func (csq *ConcertSessionQuery) Offset(offset int) *ConcertSessionQuery {
	csq.ctx.Offset = &offset
	return csq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (csq *ConcertSessionQuery) Unique(unique bool) *ConcertSessionQuery {
	csq.ctx.Unique = &unique
	return csq
}

// Order specifies how the records should be ordered.
func (csq *ConcertSessionQuery) Order(o ...concertsession.OrderOption) *ConcertSessionQuery {
	csq.order = append(csq.order, o...)
	return csq
}

// QueryOfConcert chains the current query on the "ofConcert" edge.
func (csq *ConcertSessionQuery) QueryOfConcert() *ConcertQuery {
	query := (&ConcertClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(concertsession.Table, concertsession.FieldID, selector),
			sqlgraph.To(concert.Table, concert.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, concertsession.OfConcertTable, concertsession.OfConcertPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHasSections chains the current query on the "hasSections" edge.
func (csq *ConcertSessionQuery) QueryHasSections() *SectionQuery {
	query := (&SectionClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(concertsession.Table, concertsession.FieldID, selector),
			sqlgraph.To(section.Table, section.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, concertsession.HasSectionsTable, concertsession.HasSectionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ConcertSession entity from the query.
// Returns a *NotFoundError when no ConcertSession was found.
func (csq *ConcertSessionQuery) First(ctx context.Context) (*ConcertSession, error) {
	nodes, err := csq.Limit(1).All(setContextOp(ctx, csq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{concertsession.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (csq *ConcertSessionQuery) FirstX(ctx context.Context) *ConcertSession {
	node, err := csq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ConcertSession ID from the query.
// Returns a *NotFoundError when no ConcertSession ID was found.
func (csq *ConcertSessionQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = csq.Limit(1).IDs(setContextOp(ctx, csq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{concertsession.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (csq *ConcertSessionQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := csq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ConcertSession entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ConcertSession entity is found.
// Returns a *NotFoundError when no ConcertSession entities are found.
func (csq *ConcertSessionQuery) Only(ctx context.Context) (*ConcertSession, error) {
	nodes, err := csq.Limit(2).All(setContextOp(ctx, csq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{concertsession.Label}
	default:
		return nil, &NotSingularError{concertsession.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (csq *ConcertSessionQuery) OnlyX(ctx context.Context) *ConcertSession {
	node, err := csq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ConcertSession ID in the query.
// Returns a *NotSingularError when more than one ConcertSession ID is found.
// Returns a *NotFoundError when no entities are found.
func (csq *ConcertSessionQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = csq.Limit(2).IDs(setContextOp(ctx, csq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{concertsession.Label}
	default:
		err = &NotSingularError{concertsession.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (csq *ConcertSessionQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := csq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ConcertSessions.
func (csq *ConcertSessionQuery) All(ctx context.Context) ([]*ConcertSession, error) {
	ctx = setContextOp(ctx, csq.ctx, "All")
	if err := csq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ConcertSession, *ConcertSessionQuery]()
	return withInterceptors[[]*ConcertSession](ctx, csq, qr, csq.inters)
}

// AllX is like All, but panics if an error occurs.
func (csq *ConcertSessionQuery) AllX(ctx context.Context) []*ConcertSession {
	nodes, err := csq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ConcertSession IDs.
func (csq *ConcertSessionQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if csq.ctx.Unique == nil && csq.path != nil {
		csq.Unique(true)
	}
	ctx = setContextOp(ctx, csq.ctx, "IDs")
	if err = csq.Select(concertsession.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (csq *ConcertSessionQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := csq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (csq *ConcertSessionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, csq.ctx, "Count")
	if err := csq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, csq, querierCount[*ConcertSessionQuery](), csq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (csq *ConcertSessionQuery) CountX(ctx context.Context) int {
	count, err := csq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (csq *ConcertSessionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, csq.ctx, "Exist")
	switch _, err := csq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (csq *ConcertSessionQuery) ExistX(ctx context.Context) bool {
	exist, err := csq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ConcertSessionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (csq *ConcertSessionQuery) Clone() *ConcertSessionQuery {
	if csq == nil {
		return nil
	}
	return &ConcertSessionQuery{
		config:          csq.config,
		ctx:             csq.ctx.Clone(),
		order:           append([]concertsession.OrderOption{}, csq.order...),
		inters:          append([]Interceptor{}, csq.inters...),
		predicates:      append([]predicate.ConcertSession{}, csq.predicates...),
		withOfConcert:   csq.withOfConcert.Clone(),
		withHasSections: csq.withHasSections.Clone(),
		// clone intermediate query.
		sql:  csq.sql.Clone(),
		path: csq.path,
	}
}

// WithOfConcert tells the query-builder to eager-load the nodes that are connected to
// the "ofConcert" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *ConcertSessionQuery) WithOfConcert(opts ...func(*ConcertQuery)) *ConcertSessionQuery {
	query := (&ConcertClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withOfConcert = query
	return csq
}

// WithHasSections tells the query-builder to eager-load the nodes that are connected to
// the "hasSections" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *ConcertSessionQuery) WithHasSections(opts ...func(*SectionQuery)) *ConcertSessionQuery {
	query := (&SectionClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withHasSections = query
	return csq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SessionDateTime int `json:"sessionDateTime,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ConcertSession.Query().
//		GroupBy(concertsession.FieldSessionDateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (csq *ConcertSessionQuery) GroupBy(field string, fields ...string) *ConcertSessionGroupBy {
	csq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ConcertSessionGroupBy{build: csq}
	grbuild.flds = &csq.ctx.Fields
	grbuild.label = concertsession.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SessionDateTime int `json:"sessionDateTime,omitempty"`
//	}
//
//	client.ConcertSession.Query().
//		Select(concertsession.FieldSessionDateTime).
//		Scan(ctx, &v)
func (csq *ConcertSessionQuery) Select(fields ...string) *ConcertSessionSelect {
	csq.ctx.Fields = append(csq.ctx.Fields, fields...)
	sbuild := &ConcertSessionSelect{ConcertSessionQuery: csq}
	sbuild.label = concertsession.Label
	sbuild.flds, sbuild.scan = &csq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ConcertSessionSelect configured with the given aggregations.
func (csq *ConcertSessionQuery) Aggregate(fns ...AggregateFunc) *ConcertSessionSelect {
	return csq.Select().Aggregate(fns...)
}

func (csq *ConcertSessionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range csq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, csq); err != nil {
				return err
			}
		}
	}
	for _, f := range csq.ctx.Fields {
		if !concertsession.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if csq.path != nil {
		prev, err := csq.path(ctx)
		if err != nil {
			return err
		}
		csq.sql = prev
	}
	return nil
}

func (csq *ConcertSessionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ConcertSession, error) {
	var (
		nodes       = []*ConcertSession{}
		_spec       = csq.querySpec()
		loadedTypes = [2]bool{
			csq.withOfConcert != nil,
			csq.withHasSections != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ConcertSession).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ConcertSession{config: csq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, csq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := csq.withOfConcert; query != nil {
		if err := csq.loadOfConcert(ctx, query, nodes,
			func(n *ConcertSession) { n.Edges.OfConcert = []*Concert{} },
			func(n *ConcertSession, e *Concert) { n.Edges.OfConcert = append(n.Edges.OfConcert, e) }); err != nil {
			return nil, err
		}
	}
	if query := csq.withHasSections; query != nil {
		if err := csq.loadHasSections(ctx, query, nodes,
			func(n *ConcertSession) { n.Edges.HasSections = []*Section{} },
			func(n *ConcertSession, e *Section) { n.Edges.HasSections = append(n.Edges.HasSections, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (csq *ConcertSessionQuery) loadOfConcert(ctx context.Context, query *ConcertQuery, nodes []*ConcertSession, init func(*ConcertSession), assign func(*ConcertSession, *Concert)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*ConcertSession)
	nids := make(map[uuid.UUID]map[*ConcertSession]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(concertsession.OfConcertTable)
		s.Join(joinT).On(s.C(concert.FieldID), joinT.C(concertsession.OfConcertPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(concertsession.OfConcertPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(concertsession.OfConcertPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ConcertSession]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Concert](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "ofConcert" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (csq *ConcertSessionQuery) loadHasSections(ctx context.Context, query *SectionQuery, nodes []*ConcertSession, init func(*ConcertSession), assign func(*ConcertSession, *Section)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ConcertSession)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Section(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(concertsession.HasSectionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.concert_session_has_sections
		if fk == nil {
			return fmt.Errorf(`foreign-key "concert_session_has_sections" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "concert_session_has_sections" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (csq *ConcertSessionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := csq.querySpec()
	_spec.Node.Columns = csq.ctx.Fields
	if len(csq.ctx.Fields) > 0 {
		_spec.Unique = csq.ctx.Unique != nil && *csq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, csq.driver, _spec)
}

func (csq *ConcertSessionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(concertsession.Table, concertsession.Columns, sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID))
	_spec.From = csq.sql
	if unique := csq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if csq.path != nil {
		_spec.Unique = true
	}
	if fields := csq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, concertsession.FieldID)
		for i := range fields {
			if fields[i] != concertsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := csq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := csq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := csq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := csq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (csq *ConcertSessionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(csq.driver.Dialect())
	t1 := builder.Table(concertsession.Table)
	columns := csq.ctx.Fields
	if len(columns) == 0 {
		columns = concertsession.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if csq.sql != nil {
		selector = csq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if csq.ctx.Unique != nil && *csq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range csq.predicates {
		p(selector)
	}
	for _, p := range csq.order {
		p(selector)
	}
	if offset := csq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := csq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ConcertSessionGroupBy is the group-by builder for ConcertSession entities.
type ConcertSessionGroupBy struct {
	selector
	build *ConcertSessionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (csgb *ConcertSessionGroupBy) Aggregate(fns ...AggregateFunc) *ConcertSessionGroupBy {
	csgb.fns = append(csgb.fns, fns...)
	return csgb
}

// Scan applies the selector query and scans the result into the given value.
func (csgb *ConcertSessionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, csgb.build.ctx, "GroupBy")
	if err := csgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConcertSessionQuery, *ConcertSessionGroupBy](ctx, csgb.build, csgb, csgb.build.inters, v)
}

func (csgb *ConcertSessionGroupBy) sqlScan(ctx context.Context, root *ConcertSessionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(csgb.fns))
	for _, fn := range csgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*csgb.flds)+len(csgb.fns))
		for _, f := range *csgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*csgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := csgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ConcertSessionSelect is the builder for selecting fields of ConcertSession entities.
type ConcertSessionSelect struct {
	*ConcertSessionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (css *ConcertSessionSelect) Aggregate(fns ...AggregateFunc) *ConcertSessionSelect {
	css.fns = append(css.fns, fns...)
	return css
}

// Scan applies the selector query and scans the result into the given value.
func (css *ConcertSessionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, css.ctx, "Select")
	if err := css.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConcertSessionQuery, *ConcertSessionSelect](ctx, css.ConcertSessionQuery, css, css.inters, v)
}

func (css *ConcertSessionSelect) sqlScan(ctx context.Context, root *ConcertSessionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(css.fns))
	for _, fn := range css.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*css.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := css.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
