// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ticketing/ent/concertsession"
	"ticketing/ent/predicate"
	"ticketing/ent/section"
	"ticketing/ent/ticket"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SectionUpdate is the builder for updating Section entities.
type SectionUpdate struct {
	config
	hooks    []Hook
	mutation *SectionMutation
}

// Where appends a list predicates to the SectionUpdate builder.
func (su *SectionUpdate) Where(ps ...predicate.Section) *SectionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SectionUpdate) SetName(s string) *SectionUpdate {
	su.mutation.SetName(s)
	return su
}

// SetCapacity sets the "capacity" field.
func (su *SectionUpdate) SetCapacity(i int) *SectionUpdate {
	su.mutation.ResetCapacity()
	su.mutation.SetCapacity(i)
	return su
}

// AddCapacity adds i to the "capacity" field.
func (su *SectionUpdate) AddCapacity(i int) *SectionUpdate {
	su.mutation.AddCapacity(i)
	return su
}

// SetReserved sets the "reserved" field.
func (su *SectionUpdate) SetReserved(i int) *SectionUpdate {
	su.mutation.ResetReserved()
	su.mutation.SetReserved(i)
	return su
}

// AddReserved adds i to the "reserved" field.
func (su *SectionUpdate) AddReserved(i int) *SectionUpdate {
	su.mutation.AddReserved(i)
	return su
}

// SetBought sets the "bought" field.
func (su *SectionUpdate) SetBought(i int) *SectionUpdate {
	su.mutation.ResetBought()
	su.mutation.SetBought(i)
	return su
}

// AddBought adds i to the "bought" field.
func (su *SectionUpdate) AddBought(i int) *SectionUpdate {
	su.mutation.AddBought(i)
	return su
}

// SetCategory sets the "category" field.
func (su *SectionUpdate) SetCategory(s section.Category) *SectionUpdate {
	su.mutation.SetCategory(s)
	return su
}

// SetPrice sets the "price" field.
func (su *SectionUpdate) SetPrice(i int) *SectionUpdate {
	su.mutation.ResetPrice()
	su.mutation.SetPrice(i)
	return su
}

// AddPrice adds i to the "price" field.
func (su *SectionUpdate) AddPrice(i int) *SectionUpdate {
	su.mutation.AddPrice(i)
	return su
}

// AddHasTicketIDs adds the "hasTickets" edge to the Ticket entity by IDs.
func (su *SectionUpdate) AddHasTicketIDs(ids ...uuid.UUID) *SectionUpdate {
	su.mutation.AddHasTicketIDs(ids...)
	return su
}

// AddHasTickets adds the "hasTickets" edges to the Ticket entity.
func (su *SectionUpdate) AddHasTickets(t ...*Ticket) *SectionUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddHasTicketIDs(ids...)
}

// SetAtConcertSessionID sets the "atConcertSession" edge to the ConcertSession entity by ID.
func (su *SectionUpdate) SetAtConcertSessionID(id uuid.UUID) *SectionUpdate {
	su.mutation.SetAtConcertSessionID(id)
	return su
}

// SetAtConcertSession sets the "atConcertSession" edge to the ConcertSession entity.
func (su *SectionUpdate) SetAtConcertSession(c *ConcertSession) *SectionUpdate {
	return su.SetAtConcertSessionID(c.ID)
}

// Mutation returns the SectionMutation object of the builder.
func (su *SectionUpdate) Mutation() *SectionMutation {
	return su.mutation
}

// ClearHasTickets clears all "hasTickets" edges to the Ticket entity.
func (su *SectionUpdate) ClearHasTickets() *SectionUpdate {
	su.mutation.ClearHasTickets()
	return su
}

// RemoveHasTicketIDs removes the "hasTickets" edge to Ticket entities by IDs.
func (su *SectionUpdate) RemoveHasTicketIDs(ids ...uuid.UUID) *SectionUpdate {
	su.mutation.RemoveHasTicketIDs(ids...)
	return su
}

// RemoveHasTickets removes "hasTickets" edges to Ticket entities.
func (su *SectionUpdate) RemoveHasTickets(t ...*Ticket) *SectionUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveHasTicketIDs(ids...)
}

// ClearAtConcertSession clears the "atConcertSession" edge to the ConcertSession entity.
func (su *SectionUpdate) ClearAtConcertSession() *SectionUpdate {
	su.mutation.ClearAtConcertSession()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SectionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SectionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SectionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SectionUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := section.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Section.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Category(); ok {
		if err := section.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Section.category": %w`, err)}
		}
	}
	if _, ok := su.mutation.AtConcertSessionID(); su.mutation.AtConcertSessionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Section.atConcertSession"`)
	}
	return nil
}

func (su *SectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(section.Table, section.Columns, sqlgraph.NewFieldSpec(section.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(section.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Capacity(); ok {
		_spec.SetField(section.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedCapacity(); ok {
		_spec.AddField(section.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := su.mutation.Reserved(); ok {
		_spec.SetField(section.FieldReserved, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedReserved(); ok {
		_spec.AddField(section.FieldReserved, field.TypeInt, value)
	}
	if value, ok := su.mutation.Bought(); ok {
		_spec.SetField(section.FieldBought, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedBought(); ok {
		_spec.AddField(section.FieldBought, field.TypeInt, value)
	}
	if value, ok := su.mutation.Category(); ok {
		_spec.SetField(section.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.SetField(section.FieldPrice, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedPrice(); ok {
		_spec.AddField(section.FieldPrice, field.TypeInt, value)
	}
	if su.mutation.HasTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.HasTicketsTable,
			Columns: []string{section.HasTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedHasTicketsIDs(); len(nodes) > 0 && !su.mutation.HasTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.HasTicketsTable,
			Columns: []string{section.HasTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.HasTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.HasTicketsTable,
			Columns: []string{section.HasTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AtConcertSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.AtConcertSessionTable,
			Columns: []string{section.AtConcertSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AtConcertSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.AtConcertSessionTable,
			Columns: []string{section.AtConcertSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SectionUpdateOne is the builder for updating a single Section entity.
type SectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SectionMutation
}

// SetName sets the "name" field.
func (suo *SectionUpdateOne) SetName(s string) *SectionUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetCapacity sets the "capacity" field.
func (suo *SectionUpdateOne) SetCapacity(i int) *SectionUpdateOne {
	suo.mutation.ResetCapacity()
	suo.mutation.SetCapacity(i)
	return suo
}

// AddCapacity adds i to the "capacity" field.
func (suo *SectionUpdateOne) AddCapacity(i int) *SectionUpdateOne {
	suo.mutation.AddCapacity(i)
	return suo
}

// SetReserved sets the "reserved" field.
func (suo *SectionUpdateOne) SetReserved(i int) *SectionUpdateOne {
	suo.mutation.ResetReserved()
	suo.mutation.SetReserved(i)
	return suo
}

// AddReserved adds i to the "reserved" field.
func (suo *SectionUpdateOne) AddReserved(i int) *SectionUpdateOne {
	suo.mutation.AddReserved(i)
	return suo
}

// SetBought sets the "bought" field.
func (suo *SectionUpdateOne) SetBought(i int) *SectionUpdateOne {
	suo.mutation.ResetBought()
	suo.mutation.SetBought(i)
	return suo
}

// AddBought adds i to the "bought" field.
func (suo *SectionUpdateOne) AddBought(i int) *SectionUpdateOne {
	suo.mutation.AddBought(i)
	return suo
}

// SetCategory sets the "category" field.
func (suo *SectionUpdateOne) SetCategory(s section.Category) *SectionUpdateOne {
	suo.mutation.SetCategory(s)
	return suo
}

// SetPrice sets the "price" field.
func (suo *SectionUpdateOne) SetPrice(i int) *SectionUpdateOne {
	suo.mutation.ResetPrice()
	suo.mutation.SetPrice(i)
	return suo
}

// AddPrice adds i to the "price" field.
func (suo *SectionUpdateOne) AddPrice(i int) *SectionUpdateOne {
	suo.mutation.AddPrice(i)
	return suo
}

// AddHasTicketIDs adds the "hasTickets" edge to the Ticket entity by IDs.
func (suo *SectionUpdateOne) AddHasTicketIDs(ids ...uuid.UUID) *SectionUpdateOne {
	suo.mutation.AddHasTicketIDs(ids...)
	return suo
}

// AddHasTickets adds the "hasTickets" edges to the Ticket entity.
func (suo *SectionUpdateOne) AddHasTickets(t ...*Ticket) *SectionUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddHasTicketIDs(ids...)
}

// SetAtConcertSessionID sets the "atConcertSession" edge to the ConcertSession entity by ID.
func (suo *SectionUpdateOne) SetAtConcertSessionID(id uuid.UUID) *SectionUpdateOne {
	suo.mutation.SetAtConcertSessionID(id)
	return suo
}

// SetAtConcertSession sets the "atConcertSession" edge to the ConcertSession entity.
func (suo *SectionUpdateOne) SetAtConcertSession(c *ConcertSession) *SectionUpdateOne {
	return suo.SetAtConcertSessionID(c.ID)
}

// Mutation returns the SectionMutation object of the builder.
func (suo *SectionUpdateOne) Mutation() *SectionMutation {
	return suo.mutation
}

// ClearHasTickets clears all "hasTickets" edges to the Ticket entity.
func (suo *SectionUpdateOne) ClearHasTickets() *SectionUpdateOne {
	suo.mutation.ClearHasTickets()
	return suo
}

// RemoveHasTicketIDs removes the "hasTickets" edge to Ticket entities by IDs.
func (suo *SectionUpdateOne) RemoveHasTicketIDs(ids ...uuid.UUID) *SectionUpdateOne {
	suo.mutation.RemoveHasTicketIDs(ids...)
	return suo
}

// RemoveHasTickets removes "hasTickets" edges to Ticket entities.
func (suo *SectionUpdateOne) RemoveHasTickets(t ...*Ticket) *SectionUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveHasTicketIDs(ids...)
}

// ClearAtConcertSession clears the "atConcertSession" edge to the ConcertSession entity.
func (suo *SectionUpdateOne) ClearAtConcertSession() *SectionUpdateOne {
	suo.mutation.ClearAtConcertSession()
	return suo
}

// Where appends a list predicates to the SectionUpdate builder.
func (suo *SectionUpdateOne) Where(ps ...predicate.Section) *SectionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SectionUpdateOne) Select(field string, fields ...string) *SectionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Section entity.
func (suo *SectionUpdateOne) Save(ctx context.Context) (*Section, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SectionUpdateOne) SaveX(ctx context.Context) *Section {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SectionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SectionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SectionUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := section.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Section.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Category(); ok {
		if err := section.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Section.category": %w`, err)}
		}
	}
	if _, ok := suo.mutation.AtConcertSessionID(); suo.mutation.AtConcertSessionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Section.atConcertSession"`)
	}
	return nil
}

func (suo *SectionUpdateOne) sqlSave(ctx context.Context) (_node *Section, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(section.Table, section.Columns, sqlgraph.NewFieldSpec(section.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Section.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, section.FieldID)
		for _, f := range fields {
			if !section.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != section.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(section.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Capacity(); ok {
		_spec.SetField(section.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedCapacity(); ok {
		_spec.AddField(section.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Reserved(); ok {
		_spec.SetField(section.FieldReserved, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedReserved(); ok {
		_spec.AddField(section.FieldReserved, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Bought(); ok {
		_spec.SetField(section.FieldBought, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedBought(); ok {
		_spec.AddField(section.FieldBought, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Category(); ok {
		_spec.SetField(section.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.SetField(section.FieldPrice, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedPrice(); ok {
		_spec.AddField(section.FieldPrice, field.TypeInt, value)
	}
	if suo.mutation.HasTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.HasTicketsTable,
			Columns: []string{section.HasTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedHasTicketsIDs(); len(nodes) > 0 && !suo.mutation.HasTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.HasTicketsTable,
			Columns: []string{section.HasTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.HasTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.HasTicketsTable,
			Columns: []string{section.HasTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AtConcertSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.AtConcertSessionTable,
			Columns: []string{section.AtConcertSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AtConcertSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.AtConcertSessionTable,
			Columns: []string{section.AtConcertSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Section{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
