// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ticketing/ent/concert"
	"ticketing/ent/concertsession"
	"ticketing/ent/genre"
	"ticketing/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConcertUpdate is the builder for updating Concert entities.
type ConcertUpdate struct {
	config
	hooks    []Hook
	mutation *ConcertMutation
}

// Where appends a list predicates to the ConcertUpdate builder.
func (cu *ConcertUpdate) Where(ps ...predicate.Concert) *ConcertUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTitle sets the "title" field.
func (cu *ConcertUpdate) SetTitle(s string) *ConcertUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetArtist sets the "artist" field.
func (cu *ConcertUpdate) SetArtist(s string) *ConcertUpdate {
	cu.mutation.SetArtist(s)
	return cu
}

// SetImageUrl sets the "imageUrl" field.
func (cu *ConcertUpdate) SetImageUrl(s string) *ConcertUpdate {
	cu.mutation.SetImageUrl(s)
	return cu
}

// SetDescription sets the "description" field.
func (cu *ConcertUpdate) SetDescription(s string) *ConcertUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ConcertUpdate) SetNillableDescription(s *string) *ConcertUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// SetHeadline sets the "headline" field.
func (cu *ConcertUpdate) SetHeadline(s string) *ConcertUpdate {
	cu.mutation.SetHeadline(s)
	return cu
}

// SetNillableHeadline sets the "headline" field if the given value is not nil.
func (cu *ConcertUpdate) SetNillableHeadline(s *string) *ConcertUpdate {
	if s != nil {
		cu.SetHeadline(*s)
	}
	return cu
}

// SetFeatured sets the "featured" field.
func (cu *ConcertUpdate) SetFeatured(b bool) *ConcertUpdate {
	cu.mutation.SetFeatured(b)
	return cu
}

// SetNillableFeatured sets the "featured" field if the given value is not nil.
func (cu *ConcertUpdate) SetNillableFeatured(b *bool) *ConcertUpdate {
	if b != nil {
		cu.SetFeatured(*b)
	}
	return cu
}

// AddHasConcertSessionIDs adds the "hasConcertSessions" edge to the ConcertSession entity by IDs.
func (cu *ConcertUpdate) AddHasConcertSessionIDs(ids ...uuid.UUID) *ConcertUpdate {
	cu.mutation.AddHasConcertSessionIDs(ids...)
	return cu
}

// AddHasConcertSessions adds the "hasConcertSessions" edges to the ConcertSession entity.
func (cu *ConcertUpdate) AddHasConcertSessions(c ...*ConcertSession) *ConcertUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddHasConcertSessionIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the Genre entity by IDs.
func (cu *ConcertUpdate) AddGenreIDs(ids ...uuid.UUID) *ConcertUpdate {
	cu.mutation.AddGenreIDs(ids...)
	return cu
}

// AddGenres adds the "genres" edges to the Genre entity.
func (cu *ConcertUpdate) AddGenres(g ...*Genre) *ConcertUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.AddGenreIDs(ids...)
}

// Mutation returns the ConcertMutation object of the builder.
func (cu *ConcertUpdate) Mutation() *ConcertMutation {
	return cu.mutation
}

// ClearHasConcertSessions clears all "hasConcertSessions" edges to the ConcertSession entity.
func (cu *ConcertUpdate) ClearHasConcertSessions() *ConcertUpdate {
	cu.mutation.ClearHasConcertSessions()
	return cu
}

// RemoveHasConcertSessionIDs removes the "hasConcertSessions" edge to ConcertSession entities by IDs.
func (cu *ConcertUpdate) RemoveHasConcertSessionIDs(ids ...uuid.UUID) *ConcertUpdate {
	cu.mutation.RemoveHasConcertSessionIDs(ids...)
	return cu
}

// RemoveHasConcertSessions removes "hasConcertSessions" edges to ConcertSession entities.
func (cu *ConcertUpdate) RemoveHasConcertSessions(c ...*ConcertSession) *ConcertUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveHasConcertSessionIDs(ids...)
}

// ClearGenres clears all "genres" edges to the Genre entity.
func (cu *ConcertUpdate) ClearGenres() *ConcertUpdate {
	cu.mutation.ClearGenres()
	return cu
}

// RemoveGenreIDs removes the "genres" edge to Genre entities by IDs.
func (cu *ConcertUpdate) RemoveGenreIDs(ids ...uuid.UUID) *ConcertUpdate {
	cu.mutation.RemoveGenreIDs(ids...)
	return cu
}

// RemoveGenres removes "genres" edges to Genre entities.
func (cu *ConcertUpdate) RemoveGenres(g ...*Genre) *ConcertUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.RemoveGenreIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConcertUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConcertUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConcertUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConcertUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConcertUpdate) check() error {
	if v, ok := cu.mutation.Title(); ok {
		if err := concert.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Concert.title": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Artist(); ok {
		if err := concert.ArtistValidator(v); err != nil {
			return &ValidationError{Name: "artist", err: fmt.Errorf(`ent: validator failed for field "Concert.artist": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ImageUrl(); ok {
		if err := concert.ImageUrlValidator(v); err != nil {
			return &ValidationError{Name: "imageUrl", err: fmt.Errorf(`ent: validator failed for field "Concert.imageUrl": %w`, err)}
		}
	}
	return nil
}

func (cu *ConcertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(concert.Table, concert.Columns, sqlgraph.NewFieldSpec(concert.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(concert.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Artist(); ok {
		_spec.SetField(concert.FieldArtist, field.TypeString, value)
	}
	if value, ok := cu.mutation.ImageUrl(); ok {
		_spec.SetField(concert.FieldImageUrl, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(concert.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.Headline(); ok {
		_spec.SetField(concert.FieldHeadline, field.TypeString, value)
	}
	if value, ok := cu.mutation.Featured(); ok {
		_spec.SetField(concert.FieldFeatured, field.TypeBool, value)
	}
	if cu.mutation.HasConcertSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.HasConcertSessionsTable,
			Columns: concert.HasConcertSessionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedHasConcertSessionsIDs(); len(nodes) > 0 && !cu.mutation.HasConcertSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.HasConcertSessionsTable,
			Columns: concert.HasConcertSessionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.HasConcertSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.HasConcertSessionsTable,
			Columns: concert.HasConcertSessionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.GenresTable,
			Columns: concert.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedGenresIDs(); len(nodes) > 0 && !cu.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.GenresTable,
			Columns: concert.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.GenresTable,
			Columns: concert.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConcertUpdateOne is the builder for updating a single Concert entity.
type ConcertUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConcertMutation
}

// SetTitle sets the "title" field.
func (cuo *ConcertUpdateOne) SetTitle(s string) *ConcertUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetArtist sets the "artist" field.
func (cuo *ConcertUpdateOne) SetArtist(s string) *ConcertUpdateOne {
	cuo.mutation.SetArtist(s)
	return cuo
}

// SetImageUrl sets the "imageUrl" field.
func (cuo *ConcertUpdateOne) SetImageUrl(s string) *ConcertUpdateOne {
	cuo.mutation.SetImageUrl(s)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ConcertUpdateOne) SetDescription(s string) *ConcertUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ConcertUpdateOne) SetNillableDescription(s *string) *ConcertUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// SetHeadline sets the "headline" field.
func (cuo *ConcertUpdateOne) SetHeadline(s string) *ConcertUpdateOne {
	cuo.mutation.SetHeadline(s)
	return cuo
}

// SetNillableHeadline sets the "headline" field if the given value is not nil.
func (cuo *ConcertUpdateOne) SetNillableHeadline(s *string) *ConcertUpdateOne {
	if s != nil {
		cuo.SetHeadline(*s)
	}
	return cuo
}

// SetFeatured sets the "featured" field.
func (cuo *ConcertUpdateOne) SetFeatured(b bool) *ConcertUpdateOne {
	cuo.mutation.SetFeatured(b)
	return cuo
}

// SetNillableFeatured sets the "featured" field if the given value is not nil.
func (cuo *ConcertUpdateOne) SetNillableFeatured(b *bool) *ConcertUpdateOne {
	if b != nil {
		cuo.SetFeatured(*b)
	}
	return cuo
}

// AddHasConcertSessionIDs adds the "hasConcertSessions" edge to the ConcertSession entity by IDs.
func (cuo *ConcertUpdateOne) AddHasConcertSessionIDs(ids ...uuid.UUID) *ConcertUpdateOne {
	cuo.mutation.AddHasConcertSessionIDs(ids...)
	return cuo
}

// AddHasConcertSessions adds the "hasConcertSessions" edges to the ConcertSession entity.
func (cuo *ConcertUpdateOne) AddHasConcertSessions(c ...*ConcertSession) *ConcertUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddHasConcertSessionIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the Genre entity by IDs.
func (cuo *ConcertUpdateOne) AddGenreIDs(ids ...uuid.UUID) *ConcertUpdateOne {
	cuo.mutation.AddGenreIDs(ids...)
	return cuo
}

// AddGenres adds the "genres" edges to the Genre entity.
func (cuo *ConcertUpdateOne) AddGenres(g ...*Genre) *ConcertUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.AddGenreIDs(ids...)
}

// Mutation returns the ConcertMutation object of the builder.
func (cuo *ConcertUpdateOne) Mutation() *ConcertMutation {
	return cuo.mutation
}

// ClearHasConcertSessions clears all "hasConcertSessions" edges to the ConcertSession entity.
func (cuo *ConcertUpdateOne) ClearHasConcertSessions() *ConcertUpdateOne {
	cuo.mutation.ClearHasConcertSessions()
	return cuo
}

// RemoveHasConcertSessionIDs removes the "hasConcertSessions" edge to ConcertSession entities by IDs.
func (cuo *ConcertUpdateOne) RemoveHasConcertSessionIDs(ids ...uuid.UUID) *ConcertUpdateOne {
	cuo.mutation.RemoveHasConcertSessionIDs(ids...)
	return cuo
}

// RemoveHasConcertSessions removes "hasConcertSessions" edges to ConcertSession entities.
func (cuo *ConcertUpdateOne) RemoveHasConcertSessions(c ...*ConcertSession) *ConcertUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveHasConcertSessionIDs(ids...)
}

// ClearGenres clears all "genres" edges to the Genre entity.
func (cuo *ConcertUpdateOne) ClearGenres() *ConcertUpdateOne {
	cuo.mutation.ClearGenres()
	return cuo
}

// RemoveGenreIDs removes the "genres" edge to Genre entities by IDs.
func (cuo *ConcertUpdateOne) RemoveGenreIDs(ids ...uuid.UUID) *ConcertUpdateOne {
	cuo.mutation.RemoveGenreIDs(ids...)
	return cuo
}

// RemoveGenres removes "genres" edges to Genre entities.
func (cuo *ConcertUpdateOne) RemoveGenres(g ...*Genre) *ConcertUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.RemoveGenreIDs(ids...)
}

// Where appends a list predicates to the ConcertUpdate builder.
func (cuo *ConcertUpdateOne) Where(ps ...predicate.Concert) *ConcertUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConcertUpdateOne) Select(field string, fields ...string) *ConcertUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Concert entity.
func (cuo *ConcertUpdateOne) Save(ctx context.Context) (*Concert, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConcertUpdateOne) SaveX(ctx context.Context) *Concert {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConcertUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConcertUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConcertUpdateOne) check() error {
	if v, ok := cuo.mutation.Title(); ok {
		if err := concert.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Concert.title": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Artist(); ok {
		if err := concert.ArtistValidator(v); err != nil {
			return &ValidationError{Name: "artist", err: fmt.Errorf(`ent: validator failed for field "Concert.artist": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ImageUrl(); ok {
		if err := concert.ImageUrlValidator(v); err != nil {
			return &ValidationError{Name: "imageUrl", err: fmt.Errorf(`ent: validator failed for field "Concert.imageUrl": %w`, err)}
		}
	}
	return nil
}

func (cuo *ConcertUpdateOne) sqlSave(ctx context.Context) (_node *Concert, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(concert.Table, concert.Columns, sqlgraph.NewFieldSpec(concert.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Concert.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, concert.FieldID)
		for _, f := range fields {
			if !concert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != concert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(concert.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Artist(); ok {
		_spec.SetField(concert.FieldArtist, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ImageUrl(); ok {
		_spec.SetField(concert.FieldImageUrl, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(concert.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Headline(); ok {
		_spec.SetField(concert.FieldHeadline, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Featured(); ok {
		_spec.SetField(concert.FieldFeatured, field.TypeBool, value)
	}
	if cuo.mutation.HasConcertSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.HasConcertSessionsTable,
			Columns: concert.HasConcertSessionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedHasConcertSessionsIDs(); len(nodes) > 0 && !cuo.mutation.HasConcertSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.HasConcertSessionsTable,
			Columns: concert.HasConcertSessionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.HasConcertSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.HasConcertSessionsTable,
			Columns: concert.HasConcertSessionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.GenresTable,
			Columns: concert.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedGenresIDs(); len(nodes) > 0 && !cuo.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.GenresTable,
			Columns: concert.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.GenresTable,
			Columns: concert.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Concert{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
