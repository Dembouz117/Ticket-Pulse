// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the ticket type in the database.
	Label = "ticket"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSeatNumber holds the string denoting the seatnumber field in the database.
	FieldSeatNumber = "seat_number"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldReservedAt holds the string denoting the reservedat field in the database.
	FieldReservedAt = "reserved_at"
	// EdgeWithinSection holds the string denoting the withinsection edge name in mutations.
	EdgeWithinSection = "withinSection"
	// Table holds the table name of the ticket in the database.
	Table = "tickets"
	// WithinSectionTable is the table that holds the withinSection relation/edge.
	WithinSectionTable = "tickets"
	// WithinSectionInverseTable is the table name for the Section entity.
	// It exists in this package in order to avoid circular dependency with the "section" package.
	WithinSectionInverseTable = "sections"
	// WithinSectionColumn is the table column denoting the withinSection relation/edge.
	WithinSectionColumn = "section_has_tickets"
)

// Columns holds all SQL columns for ticket fields.
var Columns = []string{
	FieldID,
	FieldSeatNumber,
	FieldStatus,
	FieldUserId,
	FieldReservedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tickets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"section_has_tickets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusAVAILABLE Status = "AVAILABLE"
	StatusBOUGHT    Status = "BOUGHT"
	StatusRESERVED  Status = "RESERVED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusAVAILABLE, StatusBOUGHT, StatusRESERVED:
		return nil
	default:
		return fmt.Errorf("ticket: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Ticket queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySeatNumber orders the results by the seatNumber field.
func BySeatNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeatNumber, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUserId orders the results by the userId field.
func ByUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserId, opts...).ToFunc()
}

// ByReservedAt orders the results by the reservedAt field.
func ByReservedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReservedAt, opts...).ToFunc()
}

// ByWithinSectionField orders the results by withinSection field.
func ByWithinSectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWithinSectionStep(), sql.OrderByField(field, opts...))
	}
}
func newWithinSectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WithinSectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WithinSectionTable, WithinSectionColumn),
	)
}
