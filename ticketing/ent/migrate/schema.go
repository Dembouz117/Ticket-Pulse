// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ConcertsColumns holds the columns for the "concerts" table.
	ConcertsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "artist", Type: field.TypeString},
		{Name: "image_url", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Default: ""},
		{Name: "headline", Type: field.TypeString, Default: ""},
		{Name: "featured", Type: field.TypeBool, Default: false},
	}
	// ConcertsTable holds the schema information for the "concerts" table.
	ConcertsTable = &schema.Table{
		Name:       "concerts",
		Columns:    ConcertsColumns,
		PrimaryKey: []*schema.Column{ConcertsColumns[0]},
	}
	// ConcertSessionsColumns holds the columns for the "concert_sessions" table.
	ConcertSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "session_date_time", Type: field.TypeInt, Unique: true},
	}
	// ConcertSessionsTable holds the schema information for the "concert_sessions" table.
	ConcertSessionsTable = &schema.Table{
		Name:       "concert_sessions",
		Columns:    ConcertSessionsColumns,
		PrimaryKey: []*schema.Column{ConcertSessionsColumns[0]},
	}
	// GenresColumns holds the columns for the "genres" table.
	GenresColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
	}
	// GenresTable holds the schema information for the "genres" table.
	GenresTable = &schema.Table{
		Name:       "genres",
		Columns:    GenresColumns,
		PrimaryKey: []*schema.Column{GenresColumns[0]},
	}
	// SectionsColumns holds the columns for the "sections" table.
	SectionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "capacity", Type: field.TypeInt},
		{Name: "reserved", Type: field.TypeInt},
		{Name: "bought", Type: field.TypeInt},
		{Name: "category", Type: field.TypeEnum, Enums: []string{"CAT1", "CAT2", "CAT3", "CAT4", "CAT5"}},
		{Name: "price", Type: field.TypeInt},
		{Name: "concert_session_has_sections", Type: field.TypeUUID},
	}
	// SectionsTable holds the schema information for the "sections" table.
	SectionsTable = &schema.Table{
		Name:       "sections",
		Columns:    SectionsColumns,
		PrimaryKey: []*schema.Column{SectionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sections_concert_sessions_hasSections",
				Columns:    []*schema.Column{SectionsColumns[7]},
				RefColumns: []*schema.Column{ConcertSessionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TicketsColumns holds the columns for the "tickets" table.
	TicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "seat_number", Type: field.TypeInt},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"AVAILABLE", "BOUGHT", "RESERVED"}},
		{Name: "user_id", Type: field.TypeUUID, Nullable: true},
		{Name: "reserved_at", Type: field.TypeInt, Nullable: true},
		{Name: "section_has_tickets", Type: field.TypeUUID},
	}
	// TicketsTable holds the schema information for the "tickets" table.
	TicketsTable = &schema.Table{
		Name:       "tickets",
		Columns:    TicketsColumns,
		PrimaryKey: []*schema.Column{TicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickets_sections_hasTickets",
				Columns:    []*schema.Column{TicketsColumns[5]},
				RefColumns: []*schema.Column{SectionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "ticket_user_id",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[3]},
			},
		},
	}
	// ConcertHasConcertSessionsColumns holds the columns for the "concert_hasConcertSessions" table.
	ConcertHasConcertSessionsColumns = []*schema.Column{
		{Name: "concert_id", Type: field.TypeUUID},
		{Name: "concert_session_id", Type: field.TypeUUID},
	}
	// ConcertHasConcertSessionsTable holds the schema information for the "concert_hasConcertSessions" table.
	ConcertHasConcertSessionsTable = &schema.Table{
		Name:       "concert_hasConcertSessions",
		Columns:    ConcertHasConcertSessionsColumns,
		PrimaryKey: []*schema.Column{ConcertHasConcertSessionsColumns[0], ConcertHasConcertSessionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "concert_hasConcertSessions_concert_id",
				Columns:    []*schema.Column{ConcertHasConcertSessionsColumns[0]},
				RefColumns: []*schema.Column{ConcertsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "concert_hasConcertSessions_concert_session_id",
				Columns:    []*schema.Column{ConcertHasConcertSessionsColumns[1]},
				RefColumns: []*schema.Column{ConcertSessionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ConcertGenresColumns holds the columns for the "concert_genres" table.
	ConcertGenresColumns = []*schema.Column{
		{Name: "concert_id", Type: field.TypeUUID},
		{Name: "genre_id", Type: field.TypeUUID},
	}
	// ConcertGenresTable holds the schema information for the "concert_genres" table.
	ConcertGenresTable = &schema.Table{
		Name:       "concert_genres",
		Columns:    ConcertGenresColumns,
		PrimaryKey: []*schema.Column{ConcertGenresColumns[0], ConcertGenresColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "concert_genres_concert_id",
				Columns:    []*schema.Column{ConcertGenresColumns[0]},
				RefColumns: []*schema.Column{ConcertsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "concert_genres_genre_id",
				Columns:    []*schema.Column{ConcertGenresColumns[1]},
				RefColumns: []*schema.Column{GenresColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ConcertsTable,
		ConcertSessionsTable,
		GenresTable,
		SectionsTable,
		TicketsTable,
		ConcertHasConcertSessionsTable,
		ConcertGenresTable,
	}
)

func init() {
	SectionsTable.ForeignKeys[0].RefTable = ConcertSessionsTable
	TicketsTable.ForeignKeys[0].RefTable = SectionsTable
	ConcertHasConcertSessionsTable.ForeignKeys[0].RefTable = ConcertsTable
	ConcertHasConcertSessionsTable.ForeignKeys[1].RefTable = ConcertSessionsTable
	ConcertGenresTable.ForeignKeys[0].RefTable = ConcertsTable
	ConcertGenresTable.ForeignKeys[1].RefTable = GenresTable
}
