// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	ent "ticketing/ent"
	concert "ticketing/ent/concert"
	concertsession "ticketing/ent/concertsession"
)

// ConcertService implements ConcertServiceServer
type ConcertService struct {
	client *ent.Client
	UnimplementedConcertServiceServer
}

// NewConcertService returns a new ConcertService
func NewConcertService(client *ent.Client) *ConcertService {
	return &ConcertService{
		client: client,
	}
}

// toProtoConcert transforms the ent type to the pb type
func toProtoConcert(e *ent.Concert) (*Concert, error) {
	v := &Concert{}
	artist := e.Artist
	v.Artist = artist
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	imageUrl := e.ImageUrl
	v.ImageUrl = imageUrl
	title := e.Title
	v.Title = title
	for _, edg := range e.Edges.HasConcertSessions {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.HasConcertSessions = append(v.HasConcertSessions, &ConcertSession{
			Id: id,
		})
	}
	return v, nil
}

// toProtoConcertList transforms a list of ent type to a list of pb type
func toProtoConcertList(e []*ent.Concert) ([]*Concert, error) {
	var pbList []*Concert
	for _, entEntity := range e {
		pbEntity, err := toProtoConcert(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements ConcertServiceServer.Create
func (svc *ConcertService) Create(ctx context.Context, req *CreateConcertRequest) (*Concert, error) {
	concert := req.GetConcert()
	m, err := svc.createBuilder(concert)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoConcert(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements ConcertServiceServer.Get
func (svc *ConcertService) Get(ctx context.Context, req *GetConcertRequest) (*Concert, error) {
	var (
		err error
		get *ent.Concert
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetConcertRequest_VIEW_UNSPECIFIED, GetConcertRequest_BASIC:
		get, err = svc.client.Concert.Get(ctx, id)
	case GetConcertRequest_WITH_EDGE_IDS:
		get, err = svc.client.Concert.Query().
			Where(concert.ID(id)).
			WithHasConcertSessions(func(query *ent.ConcertSessionQuery) {
				query.Select(concertsession.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoConcert(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements ConcertServiceServer.Update
func (svc *ConcertService) Update(ctx context.Context, req *UpdateConcertRequest) (*Concert, error) {
	concert := req.GetConcert()
	var concertID uuid.UUID
	if err := (&concertID).UnmarshalBinary(concert.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Concert.UpdateOneID(concertID)
	concertArtist := concert.GetArtist()
	m.SetArtist(concertArtist)
	concertImageUrl := concert.GetImageUrl()
	m.SetImageUrl(concertImageUrl)
	concertTitle := concert.GetTitle()
	m.SetTitle(concertTitle)
	for _, item := range concert.GetHasConcertSessions() {
		var hasconcertsessions uuid.UUID
		if err := (&hasconcertsessions).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddHasConcertSessionIDs(hasconcertsessions)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoConcert(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements ConcertServiceServer.Delete
func (svc *ConcertService) Delete(ctx context.Context, req *DeleteConcertRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Concert.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements ConcertServiceServer.List
func (svc *ConcertService) List(ctx context.Context, req *ListConcertRequest) (*ListConcertResponse, error) {
	var (
		err      error
		entList  []*ent.Concert
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Concert.Query().
		Order(ent.Desc(concert.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(concert.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListConcertRequest_VIEW_UNSPECIFIED, ListConcertRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListConcertRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithHasConcertSessions(func(query *ent.ConcertSessionQuery) {
				query.Select(concertsession.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoConcertList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListConcertResponse{
			ConcertList:   protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements ConcertServiceServer.BatchCreate
func (svc *ConcertService) BatchCreate(ctx context.Context, req *BatchCreateConcertsRequest) (*BatchCreateConcertsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.ConcertCreate, len(requests))
	for i, req := range requests {
		concert := req.GetConcert()
		var err error
		bulk[i], err = svc.createBuilder(concert)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Concert.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoConcertList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateConcertsResponse{
			Concerts: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *ConcertService) createBuilder(concert *Concert) (*ent.ConcertCreate, error) {
	m := svc.client.Concert.Create()
	concertArtist := concert.GetArtist()
	m.SetArtist(concertArtist)
	concertImageUrl := concert.GetImageUrl()
	m.SetImageUrl(concertImageUrl)
	concertTitle := concert.GetTitle()
	m.SetTitle(concertTitle)
	for _, item := range concert.GetHasConcertSessions() {
		var hasconcertsessions uuid.UUID
		if err := (&hasconcertsessions).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddHasConcertSessionIDs(hasconcertsessions)
	}
	return m, nil
}
