// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	ent "ticketing/ent"
	concert "ticketing/ent/concert"
	concertsession "ticketing/ent/concertsession"
	section "ticketing/ent/section"
)

// ConcertSessionService implements ConcertSessionServiceServer
type ConcertSessionService struct {
	client *ent.Client
	UnimplementedConcertSessionServiceServer
}

// NewConcertSessionService returns a new ConcertSessionService
func NewConcertSessionService(client *ent.Client) *ConcertSessionService {
	return &ConcertSessionService{
		client: client,
	}
}

// toProtoConcertSession transforms the ent type to the pb type
func toProtoConcertSession(e *ent.ConcertSession) (*ConcertSession, error) {
	v := &ConcertSession{}
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	sessionDateTime := int64(e.SessionDateTime)
	v.SessionDateTime = sessionDateTime
	for _, edg := range e.Edges.HasSections {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.HasSections = append(v.HasSections, &Section{
			Id: id,
		})
	}
	for _, edg := range e.Edges.OfConcert {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.OfConcert = append(v.OfConcert, &Concert{
			Id: id,
		})
	}
	return v, nil
}

// toProtoConcertSessionList transforms a list of ent type to a list of pb type
func toProtoConcertSessionList(e []*ent.ConcertSession) ([]*ConcertSession, error) {
	var pbList []*ConcertSession
	for _, entEntity := range e {
		pbEntity, err := toProtoConcertSession(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements ConcertSessionServiceServer.Create
func (svc *ConcertSessionService) Create(ctx context.Context, req *CreateConcertSessionRequest) (*ConcertSession, error) {
	concertsession := req.GetConcertSession()
	m, err := svc.createBuilder(concertsession)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoConcertSession(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements ConcertSessionServiceServer.Get
func (svc *ConcertSessionService) Get(ctx context.Context, req *GetConcertSessionRequest) (*ConcertSession, error) {
	var (
		err error
		get *ent.ConcertSession
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetConcertSessionRequest_VIEW_UNSPECIFIED, GetConcertSessionRequest_BASIC:
		get, err = svc.client.ConcertSession.Get(ctx, id)
	case GetConcertSessionRequest_WITH_EDGE_IDS:
		get, err = svc.client.ConcertSession.Query().
			Where(concertsession.ID(id)).
			WithHasSections(func(query *ent.SectionQuery) {
				query.Select(section.FieldID)
			}).
			WithOfConcert(func(query *ent.ConcertQuery) {
				query.Select(concert.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoConcertSession(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements ConcertSessionServiceServer.Update
func (svc *ConcertSessionService) Update(ctx context.Context, req *UpdateConcertSessionRequest) (*ConcertSession, error) {
	concertsession := req.GetConcertSession()
	var concertsessionID uuid.UUID
	if err := (&concertsessionID).UnmarshalBinary(concertsession.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.ConcertSession.UpdateOneID(concertsessionID)
	concertsessionSessionDateTime := int(concertsession.GetSessionDateTime())
	m.SetSessionDateTime(concertsessionSessionDateTime)
	for _, item := range concertsession.GetHasSections() {
		var hassections uuid.UUID
		if err := (&hassections).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddHasSectionIDs(hassections)
	}
	for _, item := range concertsession.GetOfConcert() {
		var ofconcert uuid.UUID
		if err := (&ofconcert).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddOfConcertIDs(ofconcert)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoConcertSession(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements ConcertSessionServiceServer.Delete
func (svc *ConcertSessionService) Delete(ctx context.Context, req *DeleteConcertSessionRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.ConcertSession.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements ConcertSessionServiceServer.List
func (svc *ConcertSessionService) List(ctx context.Context, req *ListConcertSessionRequest) (*ListConcertSessionResponse, error) {
	var (
		err      error
		entList  []*ent.ConcertSession
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.ConcertSession.Query().
		Order(ent.Desc(concertsession.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(concertsession.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListConcertSessionRequest_VIEW_UNSPECIFIED, ListConcertSessionRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListConcertSessionRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithHasSections(func(query *ent.SectionQuery) {
				query.Select(section.FieldID)
			}).
			WithOfConcert(func(query *ent.ConcertQuery) {
				query.Select(concert.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoConcertSessionList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListConcertSessionResponse{
			ConcertSessionList: protoList,
			NextPageToken:      nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements ConcertSessionServiceServer.BatchCreate
func (svc *ConcertSessionService) BatchCreate(ctx context.Context, req *BatchCreateConcertSessionsRequest) (*BatchCreateConcertSessionsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.ConcertSessionCreate, len(requests))
	for i, req := range requests {
		concertsession := req.GetConcertSession()
		var err error
		bulk[i], err = svc.createBuilder(concertsession)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.ConcertSession.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoConcertSessionList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateConcertSessionsResponse{
			ConcertSessions: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *ConcertSessionService) createBuilder(concertsession *ConcertSession) (*ent.ConcertSessionCreate, error) {
	m := svc.client.ConcertSession.Create()
	concertsessionSessionDateTime := int(concertsession.GetSessionDateTime())
	m.SetSessionDateTime(concertsessionSessionDateTime)
	for _, item := range concertsession.GetHasSections() {
		var hassections uuid.UUID
		if err := (&hassections).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddHasSectionIDs(hassections)
	}
	for _, item := range concertsession.GetOfConcert() {
		var ofconcert uuid.UUID
		if err := (&ofconcert).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddOfConcertIDs(ofconcert)
	}
	return m, nil
}
