// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: entpb/entpb.proto

package entpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConcertServiceClient is the client API for ConcertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConcertServiceClient interface {
	Create(ctx context.Context, in *CreateConcertRequest, opts ...grpc.CallOption) (*Concert, error)
	Get(ctx context.Context, in *GetConcertRequest, opts ...grpc.CallOption) (*Concert, error)
	Update(ctx context.Context, in *UpdateConcertRequest, opts ...grpc.CallOption) (*Concert, error)
	Delete(ctx context.Context, in *DeleteConcertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListConcertRequest, opts ...grpc.CallOption) (*ListConcertResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateConcertsRequest, opts ...grpc.CallOption) (*BatchCreateConcertsResponse, error)
}

type concertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConcertServiceClient(cc grpc.ClientConnInterface) ConcertServiceClient {
	return &concertServiceClient{cc}
}

func (c *concertServiceClient) Create(ctx context.Context, in *CreateConcertRequest, opts ...grpc.CallOption) (*Concert, error) {
	out := new(Concert)
	err := c.cc.Invoke(ctx, "/entpb.ConcertService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertServiceClient) Get(ctx context.Context, in *GetConcertRequest, opts ...grpc.CallOption) (*Concert, error) {
	out := new(Concert)
	err := c.cc.Invoke(ctx, "/entpb.ConcertService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertServiceClient) Update(ctx context.Context, in *UpdateConcertRequest, opts ...grpc.CallOption) (*Concert, error) {
	out := new(Concert)
	err := c.cc.Invoke(ctx, "/entpb.ConcertService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertServiceClient) Delete(ctx context.Context, in *DeleteConcertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.ConcertService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertServiceClient) List(ctx context.Context, in *ListConcertRequest, opts ...grpc.CallOption) (*ListConcertResponse, error) {
	out := new(ListConcertResponse)
	err := c.cc.Invoke(ctx, "/entpb.ConcertService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertServiceClient) BatchCreate(ctx context.Context, in *BatchCreateConcertsRequest, opts ...grpc.CallOption) (*BatchCreateConcertsResponse, error) {
	out := new(BatchCreateConcertsResponse)
	err := c.cc.Invoke(ctx, "/entpb.ConcertService/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConcertServiceServer is the server API for ConcertService service.
// All implementations must embed UnimplementedConcertServiceServer
// for forward compatibility
type ConcertServiceServer interface {
	Create(context.Context, *CreateConcertRequest) (*Concert, error)
	Get(context.Context, *GetConcertRequest) (*Concert, error)
	Update(context.Context, *UpdateConcertRequest) (*Concert, error)
	Delete(context.Context, *DeleteConcertRequest) (*emptypb.Empty, error)
	List(context.Context, *ListConcertRequest) (*ListConcertResponse, error)
	BatchCreate(context.Context, *BatchCreateConcertsRequest) (*BatchCreateConcertsResponse, error)
	mustEmbedUnimplementedConcertServiceServer()
}

// UnimplementedConcertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConcertServiceServer struct {
}

func (UnimplementedConcertServiceServer) Create(context.Context, *CreateConcertRequest) (*Concert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedConcertServiceServer) Get(context.Context, *GetConcertRequest) (*Concert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedConcertServiceServer) Update(context.Context, *UpdateConcertRequest) (*Concert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedConcertServiceServer) Delete(context.Context, *DeleteConcertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConcertServiceServer) List(context.Context, *ListConcertRequest) (*ListConcertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedConcertServiceServer) BatchCreate(context.Context, *BatchCreateConcertsRequest) (*BatchCreateConcertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedConcertServiceServer) mustEmbedUnimplementedConcertServiceServer() {}

// UnsafeConcertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConcertServiceServer will
// result in compilation errors.
type UnsafeConcertServiceServer interface {
	mustEmbedUnimplementedConcertServiceServer()
}

func RegisterConcertServiceServer(s grpc.ServiceRegistrar, srv ConcertServiceServer) {
	s.RegisterService(&ConcertService_ServiceDesc, srv)
}

func _ConcertService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConcertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertServiceServer).Create(ctx, req.(*CreateConcertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConcertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertServiceServer).Get(ctx, req.(*GetConcertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConcertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertServiceServer).Update(ctx, req.(*UpdateConcertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConcertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertServiceServer).Delete(ctx, req.(*DeleteConcertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConcertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertServiceServer).List(ctx, req.(*ListConcertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateConcertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertServiceServer).BatchCreate(ctx, req.(*BatchCreateConcertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConcertService_ServiceDesc is the grpc.ServiceDesc for ConcertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConcertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.ConcertService",
	HandlerType: (*ConcertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ConcertService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ConcertService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ConcertService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConcertService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ConcertService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _ConcertService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// ConcertSessionServiceClient is the client API for ConcertSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConcertSessionServiceClient interface {
	Create(ctx context.Context, in *CreateConcertSessionRequest, opts ...grpc.CallOption) (*ConcertSession, error)
	Get(ctx context.Context, in *GetConcertSessionRequest, opts ...grpc.CallOption) (*ConcertSession, error)
	Update(ctx context.Context, in *UpdateConcertSessionRequest, opts ...grpc.CallOption) (*ConcertSession, error)
	Delete(ctx context.Context, in *DeleteConcertSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListConcertSessionRequest, opts ...grpc.CallOption) (*ListConcertSessionResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateConcertSessionsRequest, opts ...grpc.CallOption) (*BatchCreateConcertSessionsResponse, error)
}

type concertSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConcertSessionServiceClient(cc grpc.ClientConnInterface) ConcertSessionServiceClient {
	return &concertSessionServiceClient{cc}
}

func (c *concertSessionServiceClient) Create(ctx context.Context, in *CreateConcertSessionRequest, opts ...grpc.CallOption) (*ConcertSession, error) {
	out := new(ConcertSession)
	err := c.cc.Invoke(ctx, "/entpb.ConcertSessionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertSessionServiceClient) Get(ctx context.Context, in *GetConcertSessionRequest, opts ...grpc.CallOption) (*ConcertSession, error) {
	out := new(ConcertSession)
	err := c.cc.Invoke(ctx, "/entpb.ConcertSessionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertSessionServiceClient) Update(ctx context.Context, in *UpdateConcertSessionRequest, opts ...grpc.CallOption) (*ConcertSession, error) {
	out := new(ConcertSession)
	err := c.cc.Invoke(ctx, "/entpb.ConcertSessionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertSessionServiceClient) Delete(ctx context.Context, in *DeleteConcertSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.ConcertSessionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertSessionServiceClient) List(ctx context.Context, in *ListConcertSessionRequest, opts ...grpc.CallOption) (*ListConcertSessionResponse, error) {
	out := new(ListConcertSessionResponse)
	err := c.cc.Invoke(ctx, "/entpb.ConcertSessionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertSessionServiceClient) BatchCreate(ctx context.Context, in *BatchCreateConcertSessionsRequest, opts ...grpc.CallOption) (*BatchCreateConcertSessionsResponse, error) {
	out := new(BatchCreateConcertSessionsResponse)
	err := c.cc.Invoke(ctx, "/entpb.ConcertSessionService/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConcertSessionServiceServer is the server API for ConcertSessionService service.
// All implementations must embed UnimplementedConcertSessionServiceServer
// for forward compatibility
type ConcertSessionServiceServer interface {
	Create(context.Context, *CreateConcertSessionRequest) (*ConcertSession, error)
	Get(context.Context, *GetConcertSessionRequest) (*ConcertSession, error)
	Update(context.Context, *UpdateConcertSessionRequest) (*ConcertSession, error)
	Delete(context.Context, *DeleteConcertSessionRequest) (*emptypb.Empty, error)
	List(context.Context, *ListConcertSessionRequest) (*ListConcertSessionResponse, error)
	BatchCreate(context.Context, *BatchCreateConcertSessionsRequest) (*BatchCreateConcertSessionsResponse, error)
	mustEmbedUnimplementedConcertSessionServiceServer()
}

// UnimplementedConcertSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConcertSessionServiceServer struct {
}

func (UnimplementedConcertSessionServiceServer) Create(context.Context, *CreateConcertSessionRequest) (*ConcertSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedConcertSessionServiceServer) Get(context.Context, *GetConcertSessionRequest) (*ConcertSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedConcertSessionServiceServer) Update(context.Context, *UpdateConcertSessionRequest) (*ConcertSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedConcertSessionServiceServer) Delete(context.Context, *DeleteConcertSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConcertSessionServiceServer) List(context.Context, *ListConcertSessionRequest) (*ListConcertSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedConcertSessionServiceServer) BatchCreate(context.Context, *BatchCreateConcertSessionsRequest) (*BatchCreateConcertSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedConcertSessionServiceServer) mustEmbedUnimplementedConcertSessionServiceServer() {}

// UnsafeConcertSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConcertSessionServiceServer will
// result in compilation errors.
type UnsafeConcertSessionServiceServer interface {
	mustEmbedUnimplementedConcertSessionServiceServer()
}

func RegisterConcertSessionServiceServer(s grpc.ServiceRegistrar, srv ConcertSessionServiceServer) {
	s.RegisterService(&ConcertSessionService_ServiceDesc, srv)
}

func _ConcertSessionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConcertSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertSessionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertSessionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertSessionServiceServer).Create(ctx, req.(*CreateConcertSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertSessionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConcertSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertSessionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertSessionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertSessionServiceServer).Get(ctx, req.(*GetConcertSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertSessionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConcertSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertSessionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertSessionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertSessionServiceServer).Update(ctx, req.(*UpdateConcertSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertSessionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConcertSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertSessionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertSessionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertSessionServiceServer).Delete(ctx, req.(*DeleteConcertSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertSessionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConcertSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertSessionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertSessionService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertSessionServiceServer).List(ctx, req.(*ListConcertSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertSessionService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateConcertSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertSessionServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ConcertSessionService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertSessionServiceServer).BatchCreate(ctx, req.(*BatchCreateConcertSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConcertSessionService_ServiceDesc is the grpc.ServiceDesc for ConcertSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConcertSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.ConcertSessionService",
	HandlerType: (*ConcertSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ConcertSessionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ConcertSessionService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ConcertSessionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConcertSessionService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ConcertSessionService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _ConcertSessionService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// SectionServiceClient is the client API for SectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SectionServiceClient interface {
	Create(ctx context.Context, in *CreateSectionRequest, opts ...grpc.CallOption) (*Section, error)
	Get(ctx context.Context, in *GetSectionRequest, opts ...grpc.CallOption) (*Section, error)
	Update(ctx context.Context, in *UpdateSectionRequest, opts ...grpc.CallOption) (*Section, error)
	Delete(ctx context.Context, in *DeleteSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListSectionRequest, opts ...grpc.CallOption) (*ListSectionResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateSectionsRequest, opts ...grpc.CallOption) (*BatchCreateSectionsResponse, error)
}

type sectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSectionServiceClient(cc grpc.ClientConnInterface) SectionServiceClient {
	return &sectionServiceClient{cc}
}

func (c *sectionServiceClient) Create(ctx context.Context, in *CreateSectionRequest, opts ...grpc.CallOption) (*Section, error) {
	out := new(Section)
	err := c.cc.Invoke(ctx, "/entpb.SectionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionServiceClient) Get(ctx context.Context, in *GetSectionRequest, opts ...grpc.CallOption) (*Section, error) {
	out := new(Section)
	err := c.cc.Invoke(ctx, "/entpb.SectionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionServiceClient) Update(ctx context.Context, in *UpdateSectionRequest, opts ...grpc.CallOption) (*Section, error) {
	out := new(Section)
	err := c.cc.Invoke(ctx, "/entpb.SectionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionServiceClient) Delete(ctx context.Context, in *DeleteSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.SectionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionServiceClient) List(ctx context.Context, in *ListSectionRequest, opts ...grpc.CallOption) (*ListSectionResponse, error) {
	out := new(ListSectionResponse)
	err := c.cc.Invoke(ctx, "/entpb.SectionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionServiceClient) BatchCreate(ctx context.Context, in *BatchCreateSectionsRequest, opts ...grpc.CallOption) (*BatchCreateSectionsResponse, error) {
	out := new(BatchCreateSectionsResponse)
	err := c.cc.Invoke(ctx, "/entpb.SectionService/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SectionServiceServer is the server API for SectionService service.
// All implementations must embed UnimplementedSectionServiceServer
// for forward compatibility
type SectionServiceServer interface {
	Create(context.Context, *CreateSectionRequest) (*Section, error)
	Get(context.Context, *GetSectionRequest) (*Section, error)
	Update(context.Context, *UpdateSectionRequest) (*Section, error)
	Delete(context.Context, *DeleteSectionRequest) (*emptypb.Empty, error)
	List(context.Context, *ListSectionRequest) (*ListSectionResponse, error)
	BatchCreate(context.Context, *BatchCreateSectionsRequest) (*BatchCreateSectionsResponse, error)
	mustEmbedUnimplementedSectionServiceServer()
}

// UnimplementedSectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSectionServiceServer struct {
}

func (UnimplementedSectionServiceServer) Create(context.Context, *CreateSectionRequest) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSectionServiceServer) Get(context.Context, *GetSectionRequest) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSectionServiceServer) Update(context.Context, *UpdateSectionRequest) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSectionServiceServer) Delete(context.Context, *DeleteSectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSectionServiceServer) List(context.Context, *ListSectionRequest) (*ListSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSectionServiceServer) BatchCreate(context.Context, *BatchCreateSectionsRequest) (*BatchCreateSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedSectionServiceServer) mustEmbedUnimplementedSectionServiceServer() {}

// UnsafeSectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SectionServiceServer will
// result in compilation errors.
type UnsafeSectionServiceServer interface {
	mustEmbedUnimplementedSectionServiceServer()
}

func RegisterSectionServiceServer(s grpc.ServiceRegistrar, srv SectionServiceServer) {
	s.RegisterService(&SectionService_ServiceDesc, srv)
}

func _SectionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SectionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).Create(ctx, req.(*CreateSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SectionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).Get(ctx, req.(*GetSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SectionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).Update(ctx, req.(*UpdateSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SectionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).Delete(ctx, req.(*DeleteSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SectionService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).List(ctx, req.(*ListSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SectionService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).BatchCreate(ctx, req.(*BatchCreateSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SectionService_ServiceDesc is the grpc.ServiceDesc for SectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.SectionService",
	HandlerType: (*SectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SectionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SectionService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SectionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SectionService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SectionService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _SectionService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	Create(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	Get(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	Update(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	Delete(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListTicketRequest, opts ...grpc.CallOption) (*ListTicketResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateTicketsRequest, opts ...grpc.CallOption) (*BatchCreateTicketsResponse, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) Create(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/entpb.TicketService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) Get(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/entpb.TicketService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) Update(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/entpb.TicketService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) Delete(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.TicketService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) List(ctx context.Context, in *ListTicketRequest, opts ...grpc.CallOption) (*ListTicketResponse, error) {
	out := new(ListTicketResponse)
	err := c.cc.Invoke(ctx, "/entpb.TicketService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) BatchCreate(ctx context.Context, in *BatchCreateTicketsRequest, opts ...grpc.CallOption) (*BatchCreateTicketsResponse, error) {
	out := new(BatchCreateTicketsResponse)
	err := c.cc.Invoke(ctx, "/entpb.TicketService/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility
type TicketServiceServer interface {
	Create(context.Context, *CreateTicketRequest) (*Ticket, error)
	Get(context.Context, *GetTicketRequest) (*Ticket, error)
	Update(context.Context, *UpdateTicketRequest) (*Ticket, error)
	Delete(context.Context, *DeleteTicketRequest) (*emptypb.Empty, error)
	List(context.Context, *ListTicketRequest) (*ListTicketResponse, error)
	BatchCreate(context.Context, *BatchCreateTicketsRequest) (*BatchCreateTicketsResponse, error)
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketServiceServer struct {
}

func (UnimplementedTicketServiceServer) Create(context.Context, *CreateTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTicketServiceServer) Get(context.Context, *GetTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTicketServiceServer) Update(context.Context, *UpdateTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTicketServiceServer) Delete(context.Context, *DeleteTicketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTicketServiceServer) List(context.Context, *ListTicketRequest) (*ListTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTicketServiceServer) BatchCreate(context.Context, *BatchCreateTicketsRequest) (*BatchCreateTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TicketService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).Create(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TicketService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).Get(ctx, req.(*GetTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TicketService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).Update(ctx, req.(*UpdateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TicketService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).Delete(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TicketService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).List(ctx, req.(*ListTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TicketService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).BatchCreate(ctx, req.(*BatchCreateTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TicketService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TicketService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TicketService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TicketService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TicketService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _TicketService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}
