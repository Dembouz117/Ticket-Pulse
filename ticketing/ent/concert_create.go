// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ticketing/ent/concert"
	"ticketing/ent/concertsession"
	"ticketing/ent/genre"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConcertCreate is the builder for creating a Concert entity.
type ConcertCreate struct {
	config
	mutation *ConcertMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (cc *ConcertCreate) SetTitle(s string) *ConcertCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetArtist sets the "artist" field.
func (cc *ConcertCreate) SetArtist(s string) *ConcertCreate {
	cc.mutation.SetArtist(s)
	return cc
}

// SetImageUrl sets the "imageUrl" field.
func (cc *ConcertCreate) SetImageUrl(s string) *ConcertCreate {
	cc.mutation.SetImageUrl(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ConcertCreate) SetDescription(s string) *ConcertCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *ConcertCreate) SetNillableDescription(s *string) *ConcertCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetHeadline sets the "headline" field.
func (cc *ConcertCreate) SetHeadline(s string) *ConcertCreate {
	cc.mutation.SetHeadline(s)
	return cc
}

// SetNillableHeadline sets the "headline" field if the given value is not nil.
func (cc *ConcertCreate) SetNillableHeadline(s *string) *ConcertCreate {
	if s != nil {
		cc.SetHeadline(*s)
	}
	return cc
}

// SetFeatured sets the "featured" field.
func (cc *ConcertCreate) SetFeatured(b bool) *ConcertCreate {
	cc.mutation.SetFeatured(b)
	return cc
}

// SetNillableFeatured sets the "featured" field if the given value is not nil.
func (cc *ConcertCreate) SetNillableFeatured(b *bool) *ConcertCreate {
	if b != nil {
		cc.SetFeatured(*b)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ConcertCreate) SetID(u uuid.UUID) *ConcertCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ConcertCreate) SetNillableID(u *uuid.UUID) *ConcertCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddHasConcertSessionIDs adds the "hasConcertSessions" edge to the ConcertSession entity by IDs.
func (cc *ConcertCreate) AddHasConcertSessionIDs(ids ...uuid.UUID) *ConcertCreate {
	cc.mutation.AddHasConcertSessionIDs(ids...)
	return cc
}

// AddHasConcertSessions adds the "hasConcertSessions" edges to the ConcertSession entity.
func (cc *ConcertCreate) AddHasConcertSessions(c ...*ConcertSession) *ConcertCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddHasConcertSessionIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the Genre entity by IDs.
func (cc *ConcertCreate) AddGenreIDs(ids ...uuid.UUID) *ConcertCreate {
	cc.mutation.AddGenreIDs(ids...)
	return cc
}

// AddGenres adds the "genres" edges to the Genre entity.
func (cc *ConcertCreate) AddGenres(g ...*Genre) *ConcertCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cc.AddGenreIDs(ids...)
}

// Mutation returns the ConcertMutation object of the builder.
func (cc *ConcertCreate) Mutation() *ConcertMutation {
	return cc.mutation
}

// Save creates the Concert in the database.
func (cc *ConcertCreate) Save(ctx context.Context) (*Concert, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConcertCreate) SaveX(ctx context.Context) *Concert {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConcertCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConcertCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConcertCreate) defaults() {
	if _, ok := cc.mutation.Description(); !ok {
		v := concert.DefaultDescription
		cc.mutation.SetDescription(v)
	}
	if _, ok := cc.mutation.Headline(); !ok {
		v := concert.DefaultHeadline
		cc.mutation.SetHeadline(v)
	}
	if _, ok := cc.mutation.Featured(); !ok {
		v := concert.DefaultFeatured
		cc.mutation.SetFeatured(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := concert.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConcertCreate) check() error {
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Concert.title"`)}
	}
	if v, ok := cc.mutation.Title(); ok {
		if err := concert.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Concert.title": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Artist(); !ok {
		return &ValidationError{Name: "artist", err: errors.New(`ent: missing required field "Concert.artist"`)}
	}
	if v, ok := cc.mutation.Artist(); ok {
		if err := concert.ArtistValidator(v); err != nil {
			return &ValidationError{Name: "artist", err: fmt.Errorf(`ent: validator failed for field "Concert.artist": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ImageUrl(); !ok {
		return &ValidationError{Name: "imageUrl", err: errors.New(`ent: missing required field "Concert.imageUrl"`)}
	}
	if v, ok := cc.mutation.ImageUrl(); ok {
		if err := concert.ImageUrlValidator(v); err != nil {
			return &ValidationError{Name: "imageUrl", err: fmt.Errorf(`ent: validator failed for field "Concert.imageUrl": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Concert.description"`)}
	}
	if _, ok := cc.mutation.Headline(); !ok {
		return &ValidationError{Name: "headline", err: errors.New(`ent: missing required field "Concert.headline"`)}
	}
	if _, ok := cc.mutation.Featured(); !ok {
		return &ValidationError{Name: "featured", err: errors.New(`ent: missing required field "Concert.featured"`)}
	}
	return nil
}

func (cc *ConcertCreate) sqlSave(ctx context.Context) (*Concert, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConcertCreate) createSpec() (*Concert, *sqlgraph.CreateSpec) {
	var (
		_node = &Concert{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(concert.Table, sqlgraph.NewFieldSpec(concert.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(concert.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.Artist(); ok {
		_spec.SetField(concert.FieldArtist, field.TypeString, value)
		_node.Artist = value
	}
	if value, ok := cc.mutation.ImageUrl(); ok {
		_spec.SetField(concert.FieldImageUrl, field.TypeString, value)
		_node.ImageUrl = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(concert.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Headline(); ok {
		_spec.SetField(concert.FieldHeadline, field.TypeString, value)
		_node.Headline = value
	}
	if value, ok := cc.mutation.Featured(); ok {
		_spec.SetField(concert.FieldFeatured, field.TypeBool, value)
		_node.Featured = value
	}
	if nodes := cc.mutation.HasConcertSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.HasConcertSessionsTable,
			Columns: concert.HasConcertSessionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(concertsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   concert.GenresTable,
			Columns: concert.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConcertCreateBulk is the builder for creating many Concert entities in bulk.
type ConcertCreateBulk struct {
	config
	err      error
	builders []*ConcertCreate
}

// Save creates the Concert entities in the database.
func (ccb *ConcertCreateBulk) Save(ctx context.Context) ([]*Concert, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Concert, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConcertMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConcertCreateBulk) SaveX(ctx context.Context) []*Concert {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConcertCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConcertCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
