// Code generated by ent, DO NOT EDIT.

package section

import (
	"ticketing/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Section {
	return predicate.Section(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Section {
	return predicate.Section(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Section {
	return predicate.Section(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Section {
	return predicate.Section(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldName, v))
}

// Capacity applies equality check predicate on the "capacity" field. It's identical to CapacityEQ.
func Capacity(v int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldCapacity, v))
}

// Reserved applies equality check predicate on the "reserved" field. It's identical to ReservedEQ.
func Reserved(v int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldReserved, v))
}

// Bought applies equality check predicate on the "bought" field. It's identical to BoughtEQ.
func Bought(v int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldBought, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldPrice, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Section {
	return predicate.Section(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Section {
	return predicate.Section(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Section {
	return predicate.Section(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Section {
	return predicate.Section(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Section {
	return predicate.Section(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Section {
	return predicate.Section(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Section {
	return predicate.Section(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Section {
	return predicate.Section(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Section {
	return predicate.Section(sql.FieldContainsFold(FieldName, v))
}

// CapacityEQ applies the EQ predicate on the "capacity" field.
func CapacityEQ(v int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldCapacity, v))
}

// CapacityNEQ applies the NEQ predicate on the "capacity" field.
func CapacityNEQ(v int) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldCapacity, v))
}

// CapacityIn applies the In predicate on the "capacity" field.
func CapacityIn(vs ...int) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldCapacity, vs...))
}

// CapacityNotIn applies the NotIn predicate on the "capacity" field.
func CapacityNotIn(vs ...int) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldCapacity, vs...))
}

// CapacityGT applies the GT predicate on the "capacity" field.
func CapacityGT(v int) predicate.Section {
	return predicate.Section(sql.FieldGT(FieldCapacity, v))
}

// CapacityGTE applies the GTE predicate on the "capacity" field.
func CapacityGTE(v int) predicate.Section {
	return predicate.Section(sql.FieldGTE(FieldCapacity, v))
}

// CapacityLT applies the LT predicate on the "capacity" field.
func CapacityLT(v int) predicate.Section {
	return predicate.Section(sql.FieldLT(FieldCapacity, v))
}

// CapacityLTE applies the LTE predicate on the "capacity" field.
func CapacityLTE(v int) predicate.Section {
	return predicate.Section(sql.FieldLTE(FieldCapacity, v))
}

// ReservedEQ applies the EQ predicate on the "reserved" field.
func ReservedEQ(v int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldReserved, v))
}

// ReservedNEQ applies the NEQ predicate on the "reserved" field.
func ReservedNEQ(v int) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldReserved, v))
}

// ReservedIn applies the In predicate on the "reserved" field.
func ReservedIn(vs ...int) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldReserved, vs...))
}

// ReservedNotIn applies the NotIn predicate on the "reserved" field.
func ReservedNotIn(vs ...int) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldReserved, vs...))
}

// ReservedGT applies the GT predicate on the "reserved" field.
func ReservedGT(v int) predicate.Section {
	return predicate.Section(sql.FieldGT(FieldReserved, v))
}

// ReservedGTE applies the GTE predicate on the "reserved" field.
func ReservedGTE(v int) predicate.Section {
	return predicate.Section(sql.FieldGTE(FieldReserved, v))
}

// ReservedLT applies the LT predicate on the "reserved" field.
func ReservedLT(v int) predicate.Section {
	return predicate.Section(sql.FieldLT(FieldReserved, v))
}

// ReservedLTE applies the LTE predicate on the "reserved" field.
func ReservedLTE(v int) predicate.Section {
	return predicate.Section(sql.FieldLTE(FieldReserved, v))
}

// BoughtEQ applies the EQ predicate on the "bought" field.
func BoughtEQ(v int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldBought, v))
}

// BoughtNEQ applies the NEQ predicate on the "bought" field.
func BoughtNEQ(v int) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldBought, v))
}

// BoughtIn applies the In predicate on the "bought" field.
func BoughtIn(vs ...int) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldBought, vs...))
}

// BoughtNotIn applies the NotIn predicate on the "bought" field.
func BoughtNotIn(vs ...int) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldBought, vs...))
}

// BoughtGT applies the GT predicate on the "bought" field.
func BoughtGT(v int) predicate.Section {
	return predicate.Section(sql.FieldGT(FieldBought, v))
}

// BoughtGTE applies the GTE predicate on the "bought" field.
func BoughtGTE(v int) predicate.Section {
	return predicate.Section(sql.FieldGTE(FieldBought, v))
}

// BoughtLT applies the LT predicate on the "bought" field.
func BoughtLT(v int) predicate.Section {
	return predicate.Section(sql.FieldLT(FieldBought, v))
}

// BoughtLTE applies the LTE predicate on the "bought" field.
func BoughtLTE(v int) predicate.Section {
	return predicate.Section(sql.FieldLTE(FieldBought, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v Category) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v Category) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...Category) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...Category) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldCategory, vs...))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int) predicate.Section {
	return predicate.Section(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int) predicate.Section {
	return predicate.Section(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int) predicate.Section {
	return predicate.Section(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int) predicate.Section {
	return predicate.Section(sql.FieldLTE(FieldPrice, v))
}

// HasHasTickets applies the HasEdge predicate on the "hasTickets" edge.
func HasHasTickets() predicate.Section {
	return predicate.Section(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HasTicketsTable, HasTicketsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHasTicketsWith applies the HasEdge predicate on the "hasTickets" edge with a given conditions (other predicates).
func HasHasTicketsWith(preds ...predicate.Ticket) predicate.Section {
	return predicate.Section(func(s *sql.Selector) {
		step := newHasTicketsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAtConcertSession applies the HasEdge predicate on the "atConcertSession" edge.
func HasAtConcertSession() predicate.Section {
	return predicate.Section(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AtConcertSessionTable, AtConcertSessionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAtConcertSessionWith applies the HasEdge predicate on the "atConcertSession" edge with a given conditions (other predicates).
func HasAtConcertSessionWith(preds ...predicate.ConcertSession) predicate.Section {
	return predicate.Section(func(s *sql.Selector) {
		step := newAtConcertSessionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Section) predicate.Section {
	return predicate.Section(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Section) predicate.Section {
	return predicate.Section(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Section) predicate.Section {
	return predicate.Section(sql.NotPredicates(p))
}
