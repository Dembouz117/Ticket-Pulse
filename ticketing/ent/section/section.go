// Code generated by ent, DO NOT EDIT.

package section

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the section type in the database.
	Label = "section"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCapacity holds the string denoting the capacity field in the database.
	FieldCapacity = "capacity"
	// FieldReserved holds the string denoting the reserved field in the database.
	FieldReserved = "reserved"
	// FieldBought holds the string denoting the bought field in the database.
	FieldBought = "bought"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgeHasTickets holds the string denoting the hastickets edge name in mutations.
	EdgeHasTickets = "hasTickets"
	// EdgeAtConcertSession holds the string denoting the atconcertsession edge name in mutations.
	EdgeAtConcertSession = "atConcertSession"
	// Table holds the table name of the section in the database.
	Table = "sections"
	// HasTicketsTable is the table that holds the hasTickets relation/edge.
	HasTicketsTable = "tickets"
	// HasTicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	HasTicketsInverseTable = "tickets"
	// HasTicketsColumn is the table column denoting the hasTickets relation/edge.
	HasTicketsColumn = "section_has_tickets"
	// AtConcertSessionTable is the table that holds the atConcertSession relation/edge.
	AtConcertSessionTable = "sections"
	// AtConcertSessionInverseTable is the table name for the ConcertSession entity.
	// It exists in this package in order to avoid circular dependency with the "concertsession" package.
	AtConcertSessionInverseTable = "concert_sessions"
	// AtConcertSessionColumn is the table column denoting the atConcertSession relation/edge.
	AtConcertSessionColumn = "concert_session_has_sections"
)

// Columns holds all SQL columns for section fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCapacity,
	FieldReserved,
	FieldBought,
	FieldCategory,
	FieldPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sections"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"concert_session_has_sections",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryCAT1 Category = "CAT1"
	CategoryCAT2 Category = "CAT2"
	CategoryCAT3 Category = "CAT3"
	CategoryCAT4 Category = "CAT4"
	CategoryCAT5 Category = "CAT5"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryCAT1, CategoryCAT2, CategoryCAT3, CategoryCAT4, CategoryCAT5:
		return nil
	default:
		return fmt.Errorf("section: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the Section queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCapacity orders the results by the capacity field.
func ByCapacity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCapacity, opts...).ToFunc()
}

// ByReserved orders the results by the reserved field.
func ByReserved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReserved, opts...).ToFunc()
}

// ByBought orders the results by the bought field.
func ByBought(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBought, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByHasTicketsCount orders the results by hasTickets count.
func ByHasTicketsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHasTicketsStep(), opts...)
	}
}

// ByHasTickets orders the results by hasTickets terms.
func ByHasTickets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHasTicketsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAtConcertSessionField orders the results by atConcertSession field.
func ByAtConcertSessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAtConcertSessionStep(), sql.OrderByField(field, opts...))
	}
}
func newHasTicketsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HasTicketsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HasTicketsTable, HasTicketsColumn),
	)
}
func newAtConcertSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AtConcertSessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AtConcertSessionTable, AtConcertSessionColumn),
	)
}
